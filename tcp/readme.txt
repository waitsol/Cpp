简单的tcpdump抓包测试

//抓取777端口的数据 server监听777
命令  tcpdump -i 1 -nneX tcp and  port 777

服务端随机发送数据 122111asdioahfiaofa

[root@VM-4-15-ubuntu  ~]$netstat -anp |grep 777
tcp        0      0 0.0.0.0:777             0.0.0.0:*               LISTEN      258783/./server
tcp        0      0 10.0.4.15:777           218.78.68.173:60716     ESTABLISHED 258783/./server
netstat发现 777和另外一方60716端口连接 另一方用nc命令连接即可
777 和60716 分别对面 0x309  0xed2c
下面的数据中  第二行第3个开始是tcp协议开始 分别对应端口  数据偏移在tcp的第13个字节也就是8018中的8 所以偏移量是8*4 ，所以tcp头部一共是32字节
数据开始是0x14(tcp开始地址)+32(0x20) =0x34  内容是 3132 3231...即我们发送的内容 
这里发送的ack是 8018 中的第12位, 1000 0000 0001 1000 即=1表示确认序号有效，我们发送的序列号是  ce88 7997=31127
窗口大小是01fd

17:08:40.651254 52:54:00:a3:e9:41 > fe:ee:8f:bf:86:99, ethertype IPv4 (0x0800), length 85: 10.0.4.15.777 > 218.78.68.173.60716: Flags [P.], seq 3465050519:3465050538, ack 3860281724, win 509, options [nop,nop,TS val 3155023262 ecr 497573268], length 19
        0x0000:  4500 0047 9bd1 4000 4006 71d5 0a00 040f  E..G..@.@.q.....
        0x0010:  da4e 44ad 0309 ed2c ce88 7997 e617 397c  .ND....,..y...9| 
        0x0020:  8018 01fd 76c6 0000 0101 080a bc0d d59e  ....v...........
        0x0030:  1da8 5d94 3132 3231 3131 6173 6469 6f61  ..].122111asdioa
        0x0040:  6866 6961 6f66 61                        hfiaofa

这里回应的ack是1 8010  1000 0000 0001 0000,确认序号是ce88 79aa 31146 ,数据长度 sizeof(122111asdioahfiaofa)=19  31146(31127+19)
2、序号和确认号：是TCP可靠传输的关键部分。序号是本报文段发送的数据组的第一个字节的序号。在TCP传送的流中，每一个字节一个序号
。e.g.一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。
所以序号确保了TCP传输的有序性。确认号，即ACK，指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误的收到。
确认号只有当ACK标志为1时才有效。比如建立连接时，SYN报文的ACK标志位为0。

//因为是应答回包 所以没有数据段 0x34
17:08:40.657115 fe:ee:8f:bf:86:99 > 52:54:00:a3:e9:41, ethertype IPv4 (0x0800), length 66: 218.78.68.173.60716 > 10.0.4.15.777: Flags [.], ack 19, win 502, options [nop,nop,TS val 497728468 ecr 3155023262], length 0
        0x0000:  45b8 0034 fbb2 4000 3106 204f da4e 44ad  E..4..@.1..O.ND.
        0x0010:  0a00 040f ed2c 0309 e617 397c ce88 79aa  .....,....9|..y.
        0x0020:  8010 01f6 8494 0000 0101 080a 1daa bbd4  ................
        0x0030:  bc0d d59e

//测试中 发送大小tcp包  发送端被猜包  系列号选择其一分别是 a b

int a = 0xd4fa5b55;
int b = 0xd4fa60d9;
int c = 0xd4fa665d;
cout << (b - a) << endl; //1412
cout << (c - b) << endl; //1412
cout << (0x5b6 - 0x32) << endl; //1412
cout << (0xd4fa6be1- c) << endl; //tcp应答系列号1412


//发送一段很长的包 4500 ip是4  包头是5  05b8 ip包的长度包含tcp
 0x0000:  4500 05b8 1f33 4000 4006 e902 0a00 040f  E....3@.@.......
        0x0010:  da4e 44ad 0309 b136 acb4 badb 122b 123f  .ND....6.....+.?
        0x0020:  8010 01fe b6e6 0000 0101 080a bff6 c727  ...............'
        0x0030:  2193 a25e 0000 0000 0000 0000 0000 0000  !..^............
        0x0040:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0050:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0060:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0070:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0580:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x0590:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x05a0:  0000 0000 0000 0000 0000 0000 0000 0000  ................
        0x05b0:  0000 0000 0000 0000 
        
11:21:58.484176 52:54:00:a3:e9:41 > fe:ee:8f:bf:86:99, ethertype IPv4 (0x0800), length 67: 10.0.4.15.777 > 218.78.68.173.45366: Flags [P.], seq 1413:1414, ack 1, win 510, options [nop,nop,TS val 3220621095 ecr 563323486], length 1
        0x0000:  4500 0035 1f34 4000 4006 ee84 0a00 040f  E..5.4@.@.......
        0x0010:  da4e 44ad 0309 b136 acb4 c05f 122b 123f  .ND....6..._.+.?
        0x0020:  8018 01fe b6dd 0000 0101 080a bff6 c727  ...............'
        0x0030:  2193 a25e 00                             !..^.
        
//只需要回复最后一个序列号 代表之前的都接收到了 acb4c060 -1 = acb4 c05f
11:21:58.489583 fe:ee:8f:bf:86:99 > 52:54:00:a3:e9:41, ethertype IPv4 (0x0800), length 66: 218.78.68.173.45366 > 10.0.4.15.777: Flags [.], ack 1414, win 501, options [nop,nop,TS val 563326342 ecr 3220621095], length 0
        0x0000:  45b8 0034 45a8 4000 3106 d659 da4e 44ad  E..4E.@.1..Y.ND.
        0x0010:  0a00 040f b136 0309 122b 123f acb4 c060  .....6...+.?...`
        0x0020:  8010 01f5 abc6 0000 0101 080a 2193 ad86  ............!...
        0x0030:  bff6 c727  