<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="598.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="581" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="581" > </text>
<g id="frames">
<g >
<title>quickSort&lt;int&gt; (464,646,460 samples, 23.23%)</title><rect x="248.4" y="261" width="274.1" height="15.0" fill="rgb(245,182,3)" rx="2" ry="2" />
<text  x="251.38" y="271.5" >quickSort&lt;int&gt;</text>
</g>
<g >
<title>Partition&lt;int&gt; (50,505,050 samples, 2.53%)</title><rect x="290.1" y="213" width="29.8" height="15.0" fill="rgb(206,4,27)" rx="2" ry="2" />
<text  x="293.10" y="223.5" >Pa..</text>
</g>
<g >
<title>MergeSort&lt;int&gt; (242,424,240 samples, 12.12%)</title><rect x="945.7" y="261" width="143.0" height="15.0" fill="rgb(205,218,53)" rx="2" ry="2" />
<text  x="948.66" y="271.5" >MergeSort&lt;int&gt;</text>
</g>
<g >
<title>quickSort&lt;int&gt; (848,484,840 samples, 42.42%)</title><rect x="21.9" y="469" width="500.6" height="15.0" fill="rgb(250,21,31)" rx="2" ry="2" />
<text  x="24.92" y="479.5" >quickSort&lt;int&gt;</text>
</g>
<g >
<title>Partition&lt;int&gt; (50,505,050 samples, 2.53%)</title><rect x="260.3" y="229" width="29.8" height="15.0" fill="rgb(242,65,25)" rx="2" ry="2" />
<text  x="263.30" y="239.5" >Pa..</text>
</g>
<g >
<title>quickSort&lt;int&gt; (737,373,730 samples, 36.87%)</title><rect x="87.5" y="405" width="435.0" height="15.0" fill="rgb(235,105,1)" rx="2" ry="2" />
<text  x="90.47" y="415.5" >quickSort&lt;int&gt;</text>
</g>
<g >
<title>std::swap&lt;int&gt; (10,101,010 samples, 0.51%)</title><rect x="498.7" y="69" width="5.9" height="15.0" fill="rgb(236,137,54)" rx="2" ry="2" />
<text  x="501.69" y="79.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (20,202,020 samples, 1.01%)</title><rect x="379.5" y="149" width="11.9" height="15.0" fill="rgb(222,35,7)" rx="2" ry="2" />
<text  x="382.49" y="159.5" ></text>
</g>
<g >
<title>quickSort&lt;int&gt; (20,202,020 samples, 1.01%)</title><rect x="504.6" y="69" width="12.0" height="15.0" fill="rgb(225,146,28)" rx="2" ry="2" />
<text  x="507.65" y="79.5" ></text>
</g>
<g >
<title>Merge&lt;int&gt; (60,606,060 samples, 3.03%)</title><rect x="522.5" y="453" width="35.8" height="15.0" fill="rgb(254,145,46)" rx="2" ry="2" />
<text  x="525.53" y="463.5" >Mer..</text>
</g>
<g >
<title>a.out (1,999,999,980 samples, 100.00%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(236,204,35)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >a.out</text>
</g>
<g >
<title>MergeSort&lt;int&gt; (717,171,710 samples, 35.86%)</title><rect x="665.6" y="405" width="423.1" height="15.0" fill="rgb(247,61,4)" rx="2" ry="2" />
<text  x="668.56" y="415.5" >MergeSort&lt;int&gt;</text>
</g>
<g >
<title>quickSort&lt;int&gt; (828,282,820 samples, 41.41%)</title><rect x="33.8" y="453" width="488.7" height="15.0" fill="rgb(217,183,10)" rx="2" ry="2" />
<text  x="36.84" y="463.5" >quickSort&lt;int&gt;</text>
</g>
<g >
<title>std::swap&lt;int&gt; (10,101,010 samples, 0.51%)</title><rect x="81.5" y="389" width="6.0" height="15.0" fill="rgb(235,115,3)" rx="2" ry="2" />
<text  x="84.52" y="399.5" ></text>
</g>
<g >
<title>Partition&lt;int&gt; (40,404,040 samples, 2.02%)</title><rect x="206.7" y="277" width="23.8" height="15.0" fill="rgb(209,175,29)" rx="2" ry="2" />
<text  x="209.67" y="287.5" >P..</text>
</g>
<g >
<title>std::swap&lt;int&gt; (30,303,030 samples, 1.52%)</title><rect x="272.2" y="213" width="17.9" height="15.0" fill="rgb(219,62,28)" rx="2" ry="2" />
<text  x="275.22" y="223.5" ></text>
</g>
<g >
<title>quickSort&lt;int&gt; (767,676,760 samples, 38.38%)</title><rect x="69.6" y="421" width="452.9" height="15.0" fill="rgb(232,71,13)" rx="2" ry="2" />
<text  x="72.60" y="431.5" >quickSort&lt;int&gt;</text>
</g>
<g >
<title>std::swap&lt;int&gt; (10,101,010 samples, 0.51%)</title><rect x="159.0" y="309" width="5.9" height="15.0" fill="rgb(219,158,25)" rx="2" ry="2" />
<text  x="161.99" y="319.5" ></text>
</g>
<g >
<title>MergeSort&lt;int&gt; (696,969,690 samples, 34.85%)</title><rect x="677.5" y="389" width="411.2" height="15.0" fill="rgb(210,155,11)" rx="2" ry="2" />
<text  x="680.47" y="399.5" >MergeSort&lt;int&gt;</text>
</g>
<g >
<title>Merge&lt;int&gt; (101,010,100 samples, 5.05%)</title><rect x="987.4" y="229" width="59.6" height="15.0" fill="rgb(227,36,36)" rx="2" ry="2" />
<text  x="990.37" y="239.5" >Merge&lt;..</text>
</g>
<g >
<title>Merge&lt;int&gt; (90,909,090 samples, 4.55%)</title><rect x="611.9" y="405" width="53.7" height="15.0" fill="rgb(215,225,31)" rx="2" ry="2" />
<text  x="614.92" y="415.5" >Merge..</text>
</g>
<g >
<title>Merge&lt;int&gt; (60,606,060 samples, 3.03%)</title><rect x="558.3" y="437" width="35.7" height="15.0" fill="rgb(238,83,34)" rx="2" ry="2" />
<text  x="561.28" y="447.5" >Mer..</text>
</g>
<g >
<title>Partition&lt;int&gt; (30,303,030 samples, 1.52%)</title><rect x="457.0" y="117" width="17.8" height="15.0" fill="rgb(207,74,35)" rx="2" ry="2" />
<text  x="459.97" y="127.5" ></text>
</g>
<g >
<title>quickSort&lt;int&gt; (676,767,670 samples, 33.84%)</title><rect x="123.2" y="373" width="399.3" height="15.0" fill="rgb(219,153,33)" rx="2" ry="2" />
<text  x="126.23" y="383.5" >quickSort&lt;int&gt;</text>
</g>
<g >
<title>Partition&lt;int&gt; (20,202,020 samples, 1.01%)</title><rect x="504.6" y="53" width="12.0" height="15.0" fill="rgb(252,41,29)" rx="2" ry="2" />
<text  x="507.65" y="63.5" ></text>
</g>
<g >
<title>quickSort&lt;int&gt; (343,434,340 samples, 17.17%)</title><rect x="319.9" y="213" width="202.6" height="15.0" fill="rgb(227,183,53)" rx="2" ry="2" />
<text  x="322.90" y="223.5" >quickSort&lt;int&gt;</text>
</g>
<g >
<title>Partition&lt;int&gt; (20,202,020 samples, 1.01%)</title><rect x="153.0" y="325" width="11.9" height="15.0" fill="rgb(242,205,42)" rx="2" ry="2" />
<text  x="156.03" y="335.5" ></text>
</g>
<g >
<title>Partition&lt;int&gt; (70,707,070 samples, 3.54%)</title><rect x="349.7" y="165" width="41.7" height="15.0" fill="rgb(213,103,28)" rx="2" ry="2" />
<text  x="352.70" y="175.5" >Par..</text>
</g>
<g >
<title>Partition&lt;int&gt; (30,303,030 samples, 1.52%)</title><rect x="188.8" y="293" width="17.9" height="15.0" fill="rgb(231,158,27)" rx="2" ry="2" />
<text  x="191.79" y="303.5" ></text>
</g>
<g >
<title>Partition&lt;int&gt; (30,303,030 samples, 1.52%)</title><rect x="230.5" y="261" width="17.9" height="15.0" fill="rgb(221,92,8)" rx="2" ry="2" />
<text  x="233.51" y="271.5" ></text>
</g>
<g >
<title>quickSort&lt;int&gt; (535,353,530 samples, 26.77%)</title><rect x="206.7" y="293" width="315.8" height="15.0" fill="rgb(237,116,53)" rx="2" ry="2" />
<text  x="209.67" y="303.5" >quickSort&lt;int&gt;</text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (10,101,010 samples, 0.51%)</title><rect x="45.8" y="405" width="5.9" height="15.0" fill="rgb(248,219,40)" rx="2" ry="2" />
<text  x="48.76" y="415.5" ></text>
</g>
<g >
<title>MergeSort&lt;int&gt; (70,707,070 samples, 3.54%)</title><rect x="1047.0" y="229" width="41.7" height="15.0" fill="rgb(235,7,53)" rx="2" ry="2" />
<text  x="1049.97" y="239.5" >Mer..</text>
</g>
<g >
<title>quickSort&lt;int&gt; (656,565,650 samples, 32.83%)</title><rect x="135.2" y="357" width="387.3" height="15.0" fill="rgb(240,64,26)" rx="2" ry="2" />
<text  x="138.15" y="367.5" >quickSort&lt;int&gt;</text>
</g>
<g >
<title>MergeSort&lt;int&gt; (585,858,580 samples, 29.29%)</title><rect x="743.0" y="341" width="345.7" height="15.0" fill="rgb(248,62,14)" rx="2" ry="2" />
<text  x="746.03" y="351.5" >MergeSort&lt;int&gt;</text>
</g>
<g >
<title>quickSort&lt;int&gt; (292,929,290 samples, 14.65%)</title><rect x="349.7" y="181" width="172.8" height="15.0" fill="rgb(218,111,21)" rx="2" ry="2" />
<text  x="352.70" y="191.5" >quickSort&lt;int&gt;</text>
</g>
<g >
<title>Partition&lt;int&gt; (20,202,020 samples, 1.01%)</title><rect x="123.2" y="357" width="12.0" height="15.0" fill="rgb(251,47,51)" rx="2" ry="2" />
<text  x="126.23" y="367.5" ></text>
</g>
<g >
<title>Partition&lt;int&gt; (20,202,020 samples, 1.01%)</title><rect x="248.4" y="245" width="11.9" height="15.0" fill="rgb(248,82,50)" rx="2" ry="2" />
<text  x="251.38" y="255.5" ></text>
</g>
<g >
<title>quickSort&lt;int&gt; (606,060,600 samples, 30.30%)</title><rect x="164.9" y="325" width="357.6" height="15.0" fill="rgb(227,87,20)" rx="2" ry="2" />
<text  x="167.95" y="335.5" >quickSort&lt;int&gt;</text>
</g>
<g >
<title>Partition&lt;int&gt; (50,505,050 samples, 2.53%)</title><rect x="397.4" y="149" width="29.8" height="15.0" fill="rgb(212,182,10)" rx="2" ry="2" />
<text  x="400.37" y="159.5" >Pa..</text>
</g>
<g >
<title>Partition&lt;int&gt; (40,404,040 samples, 2.02%)</title><rect x="164.9" y="309" width="23.9" height="15.0" fill="rgb(231,128,3)" rx="2" ry="2" />
<text  x="167.95" y="319.5" >P..</text>
</g>
<g >
<title>Merge&lt;int&gt; (80,808,080 samples, 4.04%)</title><rect x="802.6" y="293" width="47.7" height="15.0" fill="rgb(206,66,34)" rx="2" ry="2" />
<text  x="805.63" y="303.5" >Merg..</text>
</g>
<g >
<title>std::swap&lt;int&gt; (10,101,010 samples, 0.51%)</title><rect x="516.6" y="117" width="5.9" height="15.0" fill="rgb(213,207,44)" rx="2" ry="2" />
<text  x="519.57" y="127.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (20,202,020 samples, 1.01%)</title><rect x="176.9" y="293" width="11.9" height="15.0" fill="rgb(254,83,50)" rx="2" ry="2" />
<text  x="179.87" y="303.5" ></text>
</g>
<g >
<title>MergeSort&lt;int&gt; (10,101,010 samples, 0.51%)</title><rect x="1076.8" y="197" width="5.9" height="15.0" fill="rgb(240,68,25)" rx="2" ry="2" />
<text  x="1079.77" y="207.5" ></text>
</g>
<g >
<title>Partition&lt;int&gt; (10,101,010 samples, 0.51%)</title><rect x="498.7" y="85" width="5.9" height="15.0" fill="rgb(222,140,43)" rx="2" ry="2" />
<text  x="501.69" y="95.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (10,101,010 samples, 0.51%)</title><rect x="182.8" y="277" width="6.0" height="15.0" fill="rgb(213,173,52)" rx="2" ry="2" />
<text  x="185.83" y="287.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (10,101,010 samples, 0.51%)</title><rect x="451.0" y="101" width="6.0" height="15.0" fill="rgb(250,182,20)" rx="2" ry="2" />
<text  x="454.01" y="111.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (10,101,010 samples, 0.51%)</title><rect x="343.7" y="165" width="6.0" height="15.0" fill="rgb(239,117,27)" rx="2" ry="2" />
<text  x="346.74" y="175.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (10,101,010 samples, 0.51%)</title><rect x="129.2" y="325" width="6.0" height="15.0" fill="rgb(222,108,29)" rx="2" ry="2" />
<text  x="132.19" y="335.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;int&gt;::param_type::a (10,101,010 samples, 0.51%)</title><rect x="1184.0" y="469" width="6.0" height="15.0" fill="rgb(234,59,13)" rx="2" ry="2" />
<text  x="1187.04" y="479.5" ></text>
</g>
<g >
<title>quickSort&lt;int&gt; (444,444,440 samples, 22.22%)</title><rect x="260.3" y="245" width="262.2" height="15.0" fill="rgb(234,16,19)" rx="2" ry="2" />
<text  x="263.30" y="255.5" >quickSort&lt;int&gt;</text>
</g>
<g >
<title>__stpncpy_sse2_unaligned (10,101,010 samples, 0.51%)</title><rect x="1082.7" y="213" width="6.0" height="15.0" fill="rgb(222,132,46)" rx="2" ry="2" />
<text  x="1085.73" y="223.5" ></text>
</g>
<g >
<title>Partition&lt;int&gt; (20,202,020 samples, 1.01%)</title><rect x="21.9" y="453" width="11.9" height="15.0" fill="rgb(239,16,19)" rx="2" ry="2" />
<text  x="24.92" y="463.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (10,101,010 samples, 0.51%)</title><rect x="99.4" y="373" width="6.0" height="15.0" fill="rgb(240,156,22)" rx="2" ry="2" />
<text  x="102.39" y="383.5" ></text>
</g>
<g >
<title>Partition&lt;int&gt; (20,202,020 samples, 1.01%)</title><rect x="319.9" y="197" width="11.9" height="15.0" fill="rgb(231,65,14)" rx="2" ry="2" />
<text  x="322.90" y="207.5" ></text>
</g>
<g >
<title>MergeSort&lt;int&gt; (404,040,400 samples, 20.20%)</title><rect x="850.3" y="293" width="238.4" height="15.0" fill="rgb(223,40,26)" rx="2" ry="2" />
<text  x="853.30" y="303.5" >MergeSort&lt;int&gt;</text>
</g>
<g >
<title>MergeSort&lt;int&gt; (171,717,170 samples, 8.59%)</title><rect x="987.4" y="245" width="101.3" height="15.0" fill="rgb(213,199,2)" rx="2" ry="2" />
<text  x="990.37" y="255.5" >MergeSort&lt;int&gt;</text>
</g>
<g >
<title>Partition&lt;int&gt; (30,303,030 samples, 1.52%)</title><rect x="33.8" y="437" width="17.9" height="15.0" fill="rgb(245,29,3)" rx="2" ry="2" />
<text  x="36.84" y="447.5" ></text>
</g>
<g >
<title>MergeSort&lt;int&gt; (656,565,650 samples, 32.83%)</title><rect x="701.3" y="373" width="387.4" height="15.0" fill="rgb(230,50,23)" rx="2" ry="2" />
<text  x="704.31" y="383.5" >MergeSort&lt;int&gt;</text>
</g>
<g >
<title>quickSort&lt;int&gt; (393,939,390 samples, 19.70%)</title><rect x="290.1" y="229" width="232.4" height="15.0" fill="rgb(254,159,44)" rx="2" ry="2" />
<text  x="293.10" y="239.5" >quickSort&lt;int&gt;</text>
</g>
<g >
<title>MergeSort&lt;int&gt; (313,131,310 samples, 15.66%)</title><rect x="903.9" y="277" width="184.8" height="15.0" fill="rgb(207,47,49)" rx="2" ry="2" />
<text  x="906.94" y="287.5" >MergeSort&lt;int&gt;</text>
</g>
<g >
<title>std::swap&lt;int&gt; (10,101,010 samples, 0.51%)</title><rect x="129.2" y="341" width="6.0" height="15.0" fill="rgb(246,70,18)" rx="2" ry="2" />
<text  x="132.19" y="351.5" ></text>
</g>
<g >
<title>Partition&lt;int&gt; (20,202,020 samples, 1.01%)</title><rect x="480.8" y="101" width="11.9" height="15.0" fill="rgb(239,212,36)" rx="2" ry="2" />
<text  x="483.81" y="111.5" ></text>
</g>
<g >
<title>Partition&lt;int&gt; (30,303,030 samples, 1.52%)</title><rect x="87.5" y="389" width="17.9" height="15.0" fill="rgb(214,135,26)" rx="2" ry="2" />
<text  x="90.47" y="399.5" ></text>
</g>
<g >
<title>MergeSort&lt;int&gt; (535,353,530 samples, 26.77%)</title><rect x="772.8" y="325" width="315.9" height="15.0" fill="rgb(205,210,12)" rx="2" ry="2" />
<text  x="775.83" y="335.5" >MergeSort&lt;int&gt;</text>
</g>
<g >
<title>Merge&lt;int&gt; (70,707,070 samples, 3.54%)</title><rect x="903.9" y="261" width="41.8" height="15.0" fill="rgb(246,43,48)" rx="2" ry="2" />
<text  x="906.94" y="271.5" >Mer..</text>
</g>
<g >
<title>quickSort&lt;int&gt; (626,262,620 samples, 31.31%)</title><rect x="153.0" y="341" width="369.5" height="15.0" fill="rgb(253,199,53)" rx="2" ry="2" />
<text  x="156.03" y="351.5" >quickSort&lt;int&gt;</text>
</g>
<g >
<title>quickSort&lt;int&gt; (40,404,040 samples, 2.02%)</title><rect x="492.7" y="101" width="23.9" height="15.0" fill="rgb(254,62,10)" rx="2" ry="2" />
<text  x="495.73" y="111.5" >q..</text>
</g>
<g >
<title>MergeSort&lt;int&gt; (838,383,830 samples, 41.92%)</title><rect x="594.0" y="437" width="494.7" height="15.0" fill="rgb(226,166,10)" rx="2" ry="2" />
<text  x="597.04" y="447.5" >MergeSort&lt;int&gt;</text>
</g>
<g >
<title>handle_amd (10,101,010 samples, 0.51%)</title><rect x="16.0" y="517" width="5.9" height="15.0" fill="rgb(223,159,29)" rx="2" ry="2" />
<text  x="18.96" y="527.5" ></text>
</g>
<g >
<title>Merge&lt;int&gt; (30,303,030 samples, 1.52%)</title><rect x="1058.9" y="197" width="17.9" height="15.0" fill="rgb(229,156,40)" rx="2" ry="2" />
<text  x="1061.89" y="207.5" ></text>
</g>
<g >
<title>std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt;::operator (10,101,010 samples, 0.51%)</title><rect x="1172.1" y="453" width="6.0" height="15.0" fill="rgb(242,1,49)" rx="2" ry="2" />
<text  x="1175.12" y="463.5" ></text>
</g>
<g >
<title>std::swap&lt;int&gt; (20,202,020 samples, 1.01%)</title><rect x="445.1" y="117" width="11.9" height="15.0" fill="rgb(250,10,10)" rx="2" ry="2" />
<text  x="448.05" y="127.5" ></text>
</g>
<g >
<title>quickSort&lt;int&gt; (565,656,560 samples, 28.28%)</title><rect x="188.8" y="309" width="333.7" height="15.0" fill="rgb(233,145,45)" rx="2" ry="2" />
<text  x="191.79" y="319.5" >quickSort&lt;int&gt;</text>
</g>
<g >
<title>Merge&lt;int&gt; (30,303,030 samples, 1.52%)</title><rect x="701.3" y="357" width="17.9" height="15.0" fill="rgb(236,66,14)" rx="2" ry="2" />
<text  x="704.31" y="367.5" ></text>
</g>
<g >
<title>MergeSort&lt;int&gt; (959,595,950 samples, 47.98%)</title><rect x="522.5" y="469" width="566.2" height="15.0" fill="rgb(206,84,34)" rx="2" ry="2" />
<text  x="525.53" y="479.5" >MergeSort&lt;int&gt;</text>
</g>
<g >
<title>__stpncpy_sse2_unaligned (10,101,010 samples, 0.51%)</title><rect x="10.0" y="501" width="6.0" height="15.0" fill="rgb(247,39,49)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;int&gt;::operator (171,717,170 samples, 8.59%)</title><rect x="1088.7" y="485" width="101.3" height="15.0" fill="rgb(221,72,1)" rx="2" ry="2" />
<text  x="1091.69" y="495.5" >std::uniform..</text>
</g>
<g >
<title>Merge&lt;int&gt; (50,505,050 samples, 2.53%)</title><rect x="772.8" y="309" width="29.8" height="15.0" fill="rgb(247,112,2)" rx="2" ry="2" />
<text  x="775.83" y="319.5" >Me..</text>
</g>
<g >
<title>std::uniform_int_distribution&lt;int&gt;::operator (141,414,140 samples, 7.07%)</title><rect x="1100.6" y="469" width="83.4" height="15.0" fill="rgb(254,50,22)" rx="2" ry="2" />
<text  x="1103.61" y="479.5" >std::unif..</text>
</g>
<g >
<title>Merge&lt;int&gt; (40,404,040 samples, 2.02%)</title><rect x="719.2" y="341" width="23.8" height="15.0" fill="rgb(226,173,8)" rx="2" ry="2" />
<text  x="722.19" y="351.5" >M..</text>
</g>
<g >
<title>Merge&lt;int&gt; (90,909,090 samples, 4.55%)</title><rect x="850.3" y="277" width="53.6" height="15.0" fill="rgb(209,148,18)" rx="2" ry="2" />
<text  x="853.30" y="287.5" >Merge..</text>
</g>
<g >
<title>std::swap&lt;int&gt; (20,202,020 samples, 1.01%)</title><rect x="504.6" y="37" width="12.0" height="15.0" fill="rgb(225,8,38)" rx="2" ry="2" />
<text  x="507.65" y="47.5" ></text>
</g>
<g >
<title>Merge&lt;int&gt; (60,606,060 samples, 3.03%)</title><rect x="951.6" y="245" width="35.8" height="15.0" fill="rgb(231,28,7)" rx="2" ry="2" />
<text  x="954.62" y="255.5" >Mer..</text>
</g>
<g >
<title>quickSort&lt;int&gt; (111,111,110 samples, 5.56%)</title><rect x="457.0" y="133" width="65.5" height="15.0" fill="rgb(209,170,20)" rx="2" ry="2" />
<text  x="459.97" y="143.5" >quickSo..</text>
</g>
<g >
<title>Partition&lt;int&gt; (30,303,030 samples, 1.52%)</title><rect x="105.4" y="373" width="17.8" height="15.0" fill="rgb(231,167,48)" rx="2" ry="2" />
<text  x="108.35" y="383.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (10,101,010 samples, 0.51%)</title><rect x="284.1" y="197" width="6.0" height="15.0" fill="rgb(221,227,24)" rx="2" ry="2" />
<text  x="287.14" y="207.5" ></text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (10,101,010 samples, 0.51%)</title><rect x="468.9" y="101" width="5.9" height="15.0" fill="rgb(218,4,47)" rx="2" ry="2" />
<text  x="471.89" y="111.5" ></text>
</g>
<g >
<title>putenv (1,979,797,960 samples, 98.99%)</title><rect x="21.9" y="517" width="1168.1" height="15.0" fill="rgb(245,200,0)" rx="2" ry="2" />
<text  x="24.92" y="527.5" >putenv</text>
</g>
<g >
<title>MergeSort&lt;int&gt; (898,989,890 samples, 44.95%)</title><rect x="558.3" y="453" width="530.4" height="15.0" fill="rgb(237,86,21)" rx="2" ry="2" />
<text  x="561.28" y="463.5" >MergeSort&lt;int&gt;</text>
</g>
<g >
<title>Merge&lt;int&gt; (20,202,020 samples, 1.01%)</title><rect x="1047.0" y="213" width="11.9" height="15.0" fill="rgb(217,145,29)" rx="2" ry="2" />
<text  x="1049.97" y="223.5" ></text>
</g>
<g >
<title>f2 (959,595,950 samples, 47.98%)</title><rect x="522.5" y="485" width="566.2" height="15.0" fill="rgb(221,144,46)" rx="2" ry="2" />
<text  x="525.53" y="495.5" >f2</text>
</g>
<g >
<title>MergeSort&lt;int&gt; (808,080,800 samples, 40.40%)</title><rect x="611.9" y="421" width="476.8" height="15.0" fill="rgb(236,150,12)" rx="2" ry="2" />
<text  x="614.92" y="431.5" >MergeSort&lt;int&gt;</text>
</g>
<g >
<title>quickSort&lt;int&gt; (797,979,790 samples, 39.90%)</title><rect x="51.7" y="437" width="470.8" height="15.0" fill="rgb(253,227,47)" rx="2" ry="2" />
<text  x="54.72" y="447.5" >quickSort&lt;int&gt;</text>
</g>
<g >
<title>MergeSort&lt;int&gt; (484,848,480 samples, 24.24%)</title><rect x="802.6" y="309" width="286.1" height="15.0" fill="rgb(237,80,45)" rx="2" ry="2" />
<text  x="805.63" y="319.5" >MergeSort&lt;int&gt;</text>
</g>
<g >
<title>Merge&lt;int&gt; (20,202,020 samples, 1.01%)</title><rect x="665.6" y="389" width="11.9" height="15.0" fill="rgb(215,110,46)" rx="2" ry="2" />
<text  x="668.56" y="399.5" ></text>
</g>
<g >
<title>MergeSort&lt;int&gt; (40,404,040 samples, 2.02%)</title><rect x="1058.9" y="213" width="23.8" height="15.0" fill="rgb(247,67,22)" rx="2" ry="2" />
<text  x="1061.89" y="223.5" >M..</text>
</g>
<g >
<title>Partition&lt;int&gt; (30,303,030 samples, 1.52%)</title><rect x="69.6" y="405" width="17.9" height="15.0" fill="rgb(230,45,48)" rx="2" ry="2" />
<text  x="72.60" y="415.5" ></text>
</g>
<g >
<title>Partition&lt;int&gt; (30,303,030 samples, 1.52%)</title><rect x="135.2" y="341" width="17.8" height="15.0" fill="rgb(236,139,46)" rx="2" ry="2" />
<text  x="138.15" y="351.5" ></text>
</g>
<g >
<title>all (1,999,999,980 samples, 100%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(228,23,8)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>Partition&lt;int&gt; (50,505,050 samples, 2.53%)</title><rect x="427.2" y="133" width="29.8" height="15.0" fill="rgb(248,134,3)" rx="2" ry="2" />
<text  x="430.17" y="143.5" >Pa..</text>
</g>
<g >
<title>f1 (848,484,840 samples, 42.42%)</title><rect x="21.9" y="485" width="500.6" height="15.0" fill="rgb(207,17,37)" rx="2" ry="2" />
<text  x="24.92" y="495.5" >f1</text>
</g>
<g >
<title>std::move&lt;int&amp;&gt; (10,101,010 samples, 0.51%)</title><rect x="439.1" y="117" width="6.0" height="15.0" fill="rgb(234,221,46)" rx="2" ry="2" />
<text  x="442.09" y="127.5" ></text>
</g>
<g >
<title>std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt;::operator (10,101,010 samples, 0.51%)</title><rect x="1094.6" y="469" width="6.0" height="15.0" fill="rgb(239,215,47)" rx="2" ry="2" />
<text  x="1097.65" y="479.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;int&gt;::param_type::a (10,101,010 samples, 0.51%)</title><rect x="1178.1" y="453" width="5.9" height="15.0" fill="rgb(225,103,30)" rx="2" ry="2" />
<text  x="1181.08" y="463.5" ></text>
</g>
<g >
<title>Merge&lt;int&gt; (40,404,040 samples, 2.02%)</title><rect x="677.5" y="373" width="23.8" height="15.0" fill="rgb(235,205,34)" rx="2" ry="2" />
<text  x="680.47" y="383.5" >M..</text>
</g>
<g >
<title>quickSort&lt;int&gt; (70,707,070 samples, 3.54%)</title><rect x="474.8" y="117" width="41.8" height="15.0" fill="rgb(218,19,39)" rx="2" ry="2" />
<text  x="477.85" y="127.5" >qui..</text>
</g>
<g >
<title>MergeSort&lt;int&gt; (626,262,620 samples, 31.31%)</title><rect x="719.2" y="357" width="369.5" height="15.0" fill="rgb(244,139,50)" rx="2" ry="2" />
<text  x="722.19" y="367.5" >MergeSort&lt;int&gt;</text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.51%)</title><rect x="10.0" y="517" width="6.0" height="15.0" fill="rgb(217,229,41)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>Partition&lt;int&gt; (30,303,030 samples, 1.52%)</title><rect x="331.8" y="181" width="17.9" height="15.0" fill="rgb(239,126,14)" rx="2" ry="2" />
<text  x="334.82" y="191.5" ></text>
</g>
<g >
<title>quickSort&lt;int&gt; (20,202,020 samples, 1.01%)</title><rect x="504.6" y="85" width="12.0" height="15.0" fill="rgb(218,228,45)" rx="2" ry="2" />
<text  x="507.65" y="95.5" ></text>
</g>
<g >
<title>Partition&lt;int&gt; (30,303,030 samples, 1.52%)</title><rect x="51.7" y="421" width="17.9" height="15.0" fill="rgb(249,95,19)" rx="2" ry="2" />
<text  x="54.72" y="431.5" ></text>
</g>
<g >
<title>quickSort&lt;int&gt; (222,222,220 samples, 11.11%)</title><rect x="391.4" y="165" width="131.1" height="15.0" fill="rgb(221,136,19)" rx="2" ry="2" />
<text  x="394.41" y="175.5" >quickSort&lt;int&gt;</text>
</g>
<g >
<title>Merge&lt;int&gt; (30,303,030 samples, 1.52%)</title><rect x="594.0" y="421" width="17.9" height="15.0" fill="rgb(218,119,9)" rx="2" ry="2" />
<text  x="597.04" y="431.5" ></text>
</g>
<g >
<title>quickSort&lt;int&gt; (494,949,490 samples, 24.75%)</title><rect x="230.5" y="277" width="292.0" height="15.0" fill="rgb(219,70,10)" rx="2" ry="2" />
<text  x="233.51" y="287.5" >quickSort&lt;int&gt;</text>
</g>
<g >
<title>quickSort&lt;int&gt; (161,616,160 samples, 8.08%)</title><rect x="427.2" y="149" width="95.3" height="15.0" fill="rgb(214,186,10)" rx="2" ry="2" />
<text  x="430.17" y="159.5" >quickSort&lt;i..</text>
</g>
<g >
<title>std::swap&lt;int&gt; (10,101,010 samples, 0.51%)</title><rect x="45.8" y="421" width="5.9" height="15.0" fill="rgb(247,103,37)" rx="2" ry="2" />
<text  x="48.76" y="431.5" ></text>
</g>
<g >
<title>main (1,979,797,960 samples, 98.99%)</title><rect x="21.9" y="501" width="1168.1" height="15.0" fill="rgb(234,114,10)" rx="2" ry="2" />
<text  x="24.92" y="511.5" >main</text>
</g>
<g >
<title>Merge&lt;int&gt; (50,505,050 samples, 2.53%)</title><rect x="743.0" y="325" width="29.8" height="15.0" fill="rgb(246,75,10)" rx="2" ry="2" />
<text  x="746.03" y="335.5" >Me..</text>
</g>
<g >
<title>quickSort&lt;int&gt; (323,232,320 samples, 16.16%)</title><rect x="331.8" y="197" width="190.7" height="15.0" fill="rgb(243,154,11)" rx="2" ry="2" />
<text  x="334.82" y="207.5" >quickSort&lt;int&gt;</text>
</g>
<g >
<title>quickSort&lt;int&gt; (707,070,700 samples, 35.35%)</title><rect x="105.4" y="389" width="417.1" height="15.0" fill="rgb(208,22,32)" rx="2" ry="2" />
<text  x="108.35" y="399.5" >quickSort&lt;int&gt;</text>
</g>
</g>
</svg>
