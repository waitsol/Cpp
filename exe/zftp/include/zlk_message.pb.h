// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zlk_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zlk_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zlk_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zlk_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zlk_5fmessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zlk_5fmessage_2eproto;
namespace zftp_message {
class Pakcet;
struct PakcetDefaultTypeInternal;
extern PakcetDefaultTypeInternal _Pakcet_default_instance_;
class cd_msg;
struct cd_msgDefaultTypeInternal;
extern cd_msgDefaultTypeInternal _cd_msg_default_instance_;
class login_msg;
struct login_msgDefaultTypeInternal;
extern login_msgDefaultTypeInternal _login_msg_default_instance_;
class ls_msg;
struct ls_msgDefaultTypeInternal;
extern ls_msgDefaultTypeInternal _ls_msg_default_instance_;
class ls_response;
struct ls_responseDefaultTypeInternal;
extern ls_responseDefaultTypeInternal _ls_response_default_instance_;
class ls_response_node;
struct ls_response_nodeDefaultTypeInternal;
extern ls_response_nodeDefaultTypeInternal _ls_response_node_default_instance_;
class mkdir_msg;
struct mkdir_msgDefaultTypeInternal;
extern mkdir_msgDefaultTypeInternal _mkdir_msg_default_instance_;
class pull_msg;
struct pull_msgDefaultTypeInternal;
extern pull_msgDefaultTypeInternal _pull_msg_default_instance_;
class pull_respon_msg;
struct pull_respon_msgDefaultTypeInternal;
extern pull_respon_msgDefaultTypeInternal _pull_respon_msg_default_instance_;
class push_msg;
struct push_msgDefaultTypeInternal;
extern push_msgDefaultTypeInternal _push_msg_default_instance_;
class response_msg;
struct response_msgDefaultTypeInternal;
extern response_msgDefaultTypeInternal _response_msg_default_instance_;
class rm_msg;
struct rm_msgDefaultTypeInternal;
extern rm_msgDefaultTypeInternal _rm_msg_default_instance_;
}  // namespace zftp_message
PROTOBUF_NAMESPACE_OPEN
template<> ::zftp_message::Pakcet* Arena::CreateMaybeMessage<::zftp_message::Pakcet>(Arena*);
template<> ::zftp_message::cd_msg* Arena::CreateMaybeMessage<::zftp_message::cd_msg>(Arena*);
template<> ::zftp_message::login_msg* Arena::CreateMaybeMessage<::zftp_message::login_msg>(Arena*);
template<> ::zftp_message::ls_msg* Arena::CreateMaybeMessage<::zftp_message::ls_msg>(Arena*);
template<> ::zftp_message::ls_response* Arena::CreateMaybeMessage<::zftp_message::ls_response>(Arena*);
template<> ::zftp_message::ls_response_node* Arena::CreateMaybeMessage<::zftp_message::ls_response_node>(Arena*);
template<> ::zftp_message::mkdir_msg* Arena::CreateMaybeMessage<::zftp_message::mkdir_msg>(Arena*);
template<> ::zftp_message::pull_msg* Arena::CreateMaybeMessage<::zftp_message::pull_msg>(Arena*);
template<> ::zftp_message::pull_respon_msg* Arena::CreateMaybeMessage<::zftp_message::pull_respon_msg>(Arena*);
template<> ::zftp_message::push_msg* Arena::CreateMaybeMessage<::zftp_message::push_msg>(Arena*);
template<> ::zftp_message::response_msg* Arena::CreateMaybeMessage<::zftp_message::response_msg>(Arena*);
template<> ::zftp_message::rm_msg* Arena::CreateMaybeMessage<::zftp_message::rm_msg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zftp_message {

// ===================================================================

class Pakcet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zftp_message.Pakcet) */ {
 public:
  inline Pakcet() : Pakcet(nullptr) {}
  ~Pakcet() override;
  explicit PROTOBUF_CONSTEXPR Pakcet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pakcet(const Pakcet& from);
  Pakcet(Pakcet&& from) noexcept
    : Pakcet() {
    *this = ::std::move(from);
  }

  inline Pakcet& operator=(const Pakcet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pakcet& operator=(Pakcet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pakcet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pakcet* internal_default_instance() {
    return reinterpret_cast<const Pakcet*>(
               &_Pakcet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pakcet& a, Pakcet& b) {
    a.Swap(&b);
  }
  inline void Swap(Pakcet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pakcet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pakcet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pakcet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pakcet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pakcet& from) {
    Pakcet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pakcet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zftp_message.Pakcet";
  }
  protected:
  explicit Pakcet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBodyFieldNumber = 3,
    kMsgIdFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // bytes msgBody = 3;
  void clear_msgbody();
  const std::string& msgbody() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgbody(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgbody();
  PROTOBUF_NODISCARD std::string* release_msgbody();
  void set_allocated_msgbody(std::string* msgbody);
  private:
  const std::string& _internal_msgbody() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgbody(const std::string& value);
  std::string* _internal_mutable_msgbody();
  public:

  // int32 msgId = 1;
  void clear_msgid();
  int32_t msgid() const;
  void set_msgid(int32_t value);
  private:
  int32_t _internal_msgid() const;
  void _internal_set_msgid(int32_t value);
  public:

  // int32 id = 2;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zftp_message.Pakcet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgbody_;
    int32_t msgid_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zlk_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class login_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zftp_message.login_msg) */ {
 public:
  inline login_msg() : login_msg(nullptr) {}
  ~login_msg() override;
  explicit PROTOBUF_CONSTEXPR login_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  login_msg(const login_msg& from);
  login_msg(login_msg&& from) noexcept
    : login_msg() {
    *this = ::std::move(from);
  }

  inline login_msg& operator=(const login_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_msg& operator=(login_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const login_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const login_msg* internal_default_instance() {
    return reinterpret_cast<const login_msg*>(
               &_login_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(login_msg& a, login_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(login_msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  login_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<login_msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const login_msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const login_msg& from) {
    login_msg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_msg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zftp_message.login_msg";
  }
  protected:
  explicit login_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kPasswdFieldNumber = 2,
  };
  // string user = 1;
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string passwd = 2;
  void clear_passwd();
  const std::string& passwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passwd();
  PROTOBUF_NODISCARD std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // @@protoc_insertion_point(class_scope:zftp_message.login_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zlk_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class mkdir_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zftp_message.mkdir_msg) */ {
 public:
  inline mkdir_msg() : mkdir_msg(nullptr) {}
  ~mkdir_msg() override;
  explicit PROTOBUF_CONSTEXPR mkdir_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mkdir_msg(const mkdir_msg& from);
  mkdir_msg(mkdir_msg&& from) noexcept
    : mkdir_msg() {
    *this = ::std::move(from);
  }

  inline mkdir_msg& operator=(const mkdir_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline mkdir_msg& operator=(mkdir_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mkdir_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const mkdir_msg* internal_default_instance() {
    return reinterpret_cast<const mkdir_msg*>(
               &_mkdir_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(mkdir_msg& a, mkdir_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(mkdir_msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mkdir_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  mkdir_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<mkdir_msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mkdir_msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const mkdir_msg& from) {
    mkdir_msg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mkdir_msg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zftp_message.mkdir_msg";
  }
  protected:
  explicit mkdir_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:zftp_message.mkdir_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zlk_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class cd_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zftp_message.cd_msg) */ {
 public:
  inline cd_msg() : cd_msg(nullptr) {}
  ~cd_msg() override;
  explicit PROTOBUF_CONSTEXPR cd_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  cd_msg(const cd_msg& from);
  cd_msg(cd_msg&& from) noexcept
    : cd_msg() {
    *this = ::std::move(from);
  }

  inline cd_msg& operator=(const cd_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline cd_msg& operator=(cd_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const cd_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const cd_msg* internal_default_instance() {
    return reinterpret_cast<const cd_msg*>(
               &_cd_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(cd_msg& a, cd_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(cd_msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cd_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  cd_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<cd_msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const cd_msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const cd_msg& from) {
    cd_msg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cd_msg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zftp_message.cd_msg";
  }
  protected:
  explicit cd_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirFieldNumber = 1,
  };
  // string dir = 1;
  void clear_dir();
  const std::string& dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dir();
  PROTOBUF_NODISCARD std::string* release_dir();
  void set_allocated_dir(std::string* dir);
  private:
  const std::string& _internal_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dir(const std::string& value);
  std::string* _internal_mutable_dir();
  public:

  // @@protoc_insertion_point(class_scope:zftp_message.cd_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dir_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zlk_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ls_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zftp_message.ls_msg) */ {
 public:
  inline ls_msg() : ls_msg(nullptr) {}
  ~ls_msg() override;
  explicit PROTOBUF_CONSTEXPR ls_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ls_msg(const ls_msg& from);
  ls_msg(ls_msg&& from) noexcept
    : ls_msg() {
    *this = ::std::move(from);
  }

  inline ls_msg& operator=(const ls_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ls_msg& operator=(ls_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ls_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ls_msg* internal_default_instance() {
    return reinterpret_cast<const ls_msg*>(
               &_ls_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ls_msg& a, ls_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(ls_msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ls_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ls_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ls_msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ls_msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ls_msg& from) {
    ls_msg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ls_msg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zftp_message.ls_msg";
  }
  protected:
  explicit ls_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:zftp_message.ls_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zlk_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ls_response_node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zftp_message.ls_response.node) */ {
 public:
  inline ls_response_node() : ls_response_node(nullptr) {}
  ~ls_response_node() override;
  explicit PROTOBUF_CONSTEXPR ls_response_node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ls_response_node(const ls_response_node& from);
  ls_response_node(ls_response_node&& from) noexcept
    : ls_response_node() {
    *this = ::std::move(from);
  }

  inline ls_response_node& operator=(const ls_response_node& from) {
    CopyFrom(from);
    return *this;
  }
  inline ls_response_node& operator=(ls_response_node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ls_response_node& default_instance() {
    return *internal_default_instance();
  }
  static inline const ls_response_node* internal_default_instance() {
    return reinterpret_cast<const ls_response_node*>(
               &_ls_response_node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ls_response_node& a, ls_response_node& b) {
    a.Swap(&b);
  }
  inline void Swap(ls_response_node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ls_response_node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ls_response_node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ls_response_node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ls_response_node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ls_response_node& from) {
    ls_response_node::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ls_response_node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zftp_message.ls_response.node";
  }
  protected:
  explicit ls_response_node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // string name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 size = 3;
  void clear_size();
  int32_t size() const;
  void set_size(int32_t value);
  private:
  int32_t _internal_size() const;
  void _internal_set_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zftp_message.ls_response.node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t id_;
    int32_t type_;
    int32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zlk_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ls_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zftp_message.ls_response) */ {
 public:
  inline ls_response() : ls_response(nullptr) {}
  ~ls_response() override;
  explicit PROTOBUF_CONSTEXPR ls_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ls_response(const ls_response& from);
  ls_response(ls_response&& from) noexcept
    : ls_response() {
    *this = ::std::move(from);
  }

  inline ls_response& operator=(const ls_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline ls_response& operator=(ls_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ls_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const ls_response* internal_default_instance() {
    return reinterpret_cast<const ls_response*>(
               &_ls_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ls_response& a, ls_response& b) {
    a.Swap(&b);
  }
  inline void Swap(ls_response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ls_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ls_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ls_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ls_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ls_response& from) {
    ls_response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ls_response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zftp_message.ls_response";
  }
  protected:
  explicit ls_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ls_response_node node;

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kErrorFieldNumber = 3,
    kOkFieldNumber = 2,
  };
  // repeated .zftp_message.ls_response.node list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::zftp_message::ls_response_node* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zftp_message::ls_response_node >*
      mutable_list();
  private:
  const ::zftp_message::ls_response_node& _internal_list(int index) const;
  ::zftp_message::ls_response_node* _internal_add_list();
  public:
  const ::zftp_message::ls_response_node& list(int index) const;
  ::zftp_message::ls_response_node* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zftp_message::ls_response_node >&
      list() const;

  // string error = 3;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // int32 ok = 2;
  void clear_ok();
  int32_t ok() const;
  void set_ok(int32_t value);
  private:
  int32_t _internal_ok() const;
  void _internal_set_ok(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:zftp_message.ls_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zftp_message::ls_response_node > list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    int32_t ok_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zlk_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class rm_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zftp_message.rm_msg) */ {
 public:
  inline rm_msg() : rm_msg(nullptr) {}
  ~rm_msg() override;
  explicit PROTOBUF_CONSTEXPR rm_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  rm_msg(const rm_msg& from);
  rm_msg(rm_msg&& from) noexcept
    : rm_msg() {
    *this = ::std::move(from);
  }

  inline rm_msg& operator=(const rm_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline rm_msg& operator=(rm_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const rm_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const rm_msg* internal_default_instance() {
    return reinterpret_cast<const rm_msg*>(
               &_rm_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(rm_msg& a, rm_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(rm_msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(rm_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  rm_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<rm_msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const rm_msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const rm_msg& from) {
    rm_msg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rm_msg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zftp_message.rm_msg";
  }
  protected:
  explicit rm_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 3,
    kForceFieldNumber = 1,
    kRecursionFieldNumber = 2,
  };
  // string file_name = 3;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // bool force = 1;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // bool recursion = 2;
  void clear_recursion();
  bool recursion() const;
  void set_recursion(bool value);
  private:
  bool _internal_recursion() const;
  void _internal_set_recursion(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zftp_message.rm_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    bool force_;
    bool recursion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zlk_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class pull_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zftp_message.pull_msg) */ {
 public:
  inline pull_msg() : pull_msg(nullptr) {}
  ~pull_msg() override;
  explicit PROTOBUF_CONSTEXPR pull_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pull_msg(const pull_msg& from);
  pull_msg(pull_msg&& from) noexcept
    : pull_msg() {
    *this = ::std::move(from);
  }

  inline pull_msg& operator=(const pull_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline pull_msg& operator=(pull_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pull_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const pull_msg* internal_default_instance() {
    return reinterpret_cast<const pull_msg*>(
               &_pull_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(pull_msg& a, pull_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(pull_msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pull_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  pull_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<pull_msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const pull_msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const pull_msg& from) {
    pull_msg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pull_msg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zftp_message.pull_msg";
  }
  protected:
  explicit pull_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDstNameFieldNumber = 2,
    kSrcDirFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string dstName = 2;
  void clear_dstname();
  const std::string& dstname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dstname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dstname();
  PROTOBUF_NODISCARD std::string* release_dstname();
  void set_allocated_dstname(std::string* dstname);
  private:
  const std::string& _internal_dstname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dstname(const std::string& value);
  std::string* _internal_mutable_dstname();
  public:

  // string src_dir = 3;
  void clear_src_dir();
  const std::string& src_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src_dir();
  PROTOBUF_NODISCARD std::string* release_src_dir();
  void set_allocated_src_dir(std::string* src_dir);
  private:
  const std::string& _internal_src_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_dir(const std::string& value);
  std::string* _internal_mutable_src_dir();
  public:

  // @@protoc_insertion_point(class_scope:zftp_message.pull_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_dir_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zlk_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class pull_respon_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zftp_message.pull_respon_msg) */ {
 public:
  inline pull_respon_msg() : pull_respon_msg(nullptr) {}
  ~pull_respon_msg() override;
  explicit PROTOBUF_CONSTEXPR pull_respon_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pull_respon_msg(const pull_respon_msg& from);
  pull_respon_msg(pull_respon_msg&& from) noexcept
    : pull_respon_msg() {
    *this = ::std::move(from);
  }

  inline pull_respon_msg& operator=(const pull_respon_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline pull_respon_msg& operator=(pull_respon_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pull_respon_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const pull_respon_msg* internal_default_instance() {
    return reinterpret_cast<const pull_respon_msg*>(
               &_pull_respon_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(pull_respon_msg& a, pull_respon_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(pull_respon_msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pull_respon_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  pull_respon_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<pull_respon_msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const pull_respon_msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const pull_respon_msg& from) {
    pull_respon_msg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pull_respon_msg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zftp_message.pull_respon_msg";
  }
  protected:
  explicit pull_respon_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kSaveNameFieldNumber = 3,
    kOkFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string save_name = 3;
  void clear_save_name();
  const std::string& save_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_save_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_save_name();
  PROTOBUF_NODISCARD std::string* release_save_name();
  void set_allocated_save_name(std::string* save_name);
  private:
  const std::string& _internal_save_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_save_name(const std::string& value);
  std::string* _internal_mutable_save_name();
  public:

  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zftp_message.pull_respon_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr save_name_;
    bool ok_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zlk_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class push_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zftp_message.push_msg) */ {
 public:
  inline push_msg() : push_msg(nullptr) {}
  ~push_msg() override;
  explicit PROTOBUF_CONSTEXPR push_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  push_msg(const push_msg& from);
  push_msg(push_msg&& from) noexcept
    : push_msg() {
    *this = ::std::move(from);
  }

  inline push_msg& operator=(const push_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline push_msg& operator=(push_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const push_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const push_msg* internal_default_instance() {
    return reinterpret_cast<const push_msg*>(
               &_push_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(push_msg& a, push_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(push_msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(push_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  push_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<push_msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const push_msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const push_msg& from) {
    push_msg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(push_msg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zftp_message.push_msg";
  }
  protected:
  explicit push_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kDstNameFieldNumber = 2,
    kSrcNameFieldNumber = 4,
    kForceFieldNumber = 3,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string dst_name = 2;
  void clear_dst_name();
  const std::string& dst_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dst_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dst_name();
  PROTOBUF_NODISCARD std::string* release_dst_name();
  void set_allocated_dst_name(std::string* dst_name);
  private:
  const std::string& _internal_dst_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dst_name(const std::string& value);
  std::string* _internal_mutable_dst_name();
  public:

  // string src_name = 4;
  void clear_src_name();
  const std::string& src_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src_name();
  PROTOBUF_NODISCARD std::string* release_src_name();
  void set_allocated_src_name(std::string* src_name);
  private:
  const std::string& _internal_src_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_name(const std::string& value);
  std::string* _internal_mutable_src_name();
  public:

  // bool force = 3;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zftp_message.push_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_name_;
    bool force_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zlk_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class response_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zftp_message.response_msg) */ {
 public:
  inline response_msg() : response_msg(nullptr) {}
  ~response_msg() override;
  explicit PROTOBUF_CONSTEXPR response_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  response_msg(const response_msg& from);
  response_msg(response_msg&& from) noexcept
    : response_msg() {
    *this = ::std::move(from);
  }

  inline response_msg& operator=(const response_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline response_msg& operator=(response_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const response_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const response_msg* internal_default_instance() {
    return reinterpret_cast<const response_msg*>(
               &_response_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(response_msg& a, response_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(response_msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(response_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  response_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<response_msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const response_msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const response_msg& from) {
    response_msg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(response_msg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zftp_message.response_msg";
  }
  protected:
  explicit response_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kOkFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zftp_message.response_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    bool ok_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zlk_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pakcet

// int32 msgId = 1;
inline void Pakcet::clear_msgid() {
  _impl_.msgid_ = 0;
}
inline int32_t Pakcet::_internal_msgid() const {
  return _impl_.msgid_;
}
inline int32_t Pakcet::msgid() const {
  // @@protoc_insertion_point(field_get:zftp_message.Pakcet.msgId)
  return _internal_msgid();
}
inline void Pakcet::_internal_set_msgid(int32_t value) {
  
  _impl_.msgid_ = value;
}
inline void Pakcet::set_msgid(int32_t value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:zftp_message.Pakcet.msgId)
}

// int32 id = 2;
inline void Pakcet::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Pakcet::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Pakcet::id() const {
  // @@protoc_insertion_point(field_get:zftp_message.Pakcet.id)
  return _internal_id();
}
inline void Pakcet::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Pakcet::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:zftp_message.Pakcet.id)
}

// bytes msgBody = 3;
inline void Pakcet::clear_msgbody() {
  _impl_.msgbody_.ClearToEmpty();
}
inline const std::string& Pakcet::msgbody() const {
  // @@protoc_insertion_point(field_get:zftp_message.Pakcet.msgBody)
  return _internal_msgbody();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pakcet::set_msgbody(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msgbody_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zftp_message.Pakcet.msgBody)
}
inline std::string* Pakcet::mutable_msgbody() {
  std::string* _s = _internal_mutable_msgbody();
  // @@protoc_insertion_point(field_mutable:zftp_message.Pakcet.msgBody)
  return _s;
}
inline const std::string& Pakcet::_internal_msgbody() const {
  return _impl_.msgbody_.Get();
}
inline void Pakcet::_internal_set_msgbody(const std::string& value) {
  
  _impl_.msgbody_.Set(value, GetArenaForAllocation());
}
inline std::string* Pakcet::_internal_mutable_msgbody() {
  
  return _impl_.msgbody_.Mutable(GetArenaForAllocation());
}
inline std::string* Pakcet::release_msgbody() {
  // @@protoc_insertion_point(field_release:zftp_message.Pakcet.msgBody)
  return _impl_.msgbody_.Release();
}
inline void Pakcet::set_allocated_msgbody(std::string* msgbody) {
  if (msgbody != nullptr) {
    
  } else {
    
  }
  _impl_.msgbody_.SetAllocated(msgbody, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msgbody_.IsDefault()) {
    _impl_.msgbody_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zftp_message.Pakcet.msgBody)
}

// -------------------------------------------------------------------

// login_msg

// string user = 1;
inline void login_msg::clear_user() {
  _impl_.user_.ClearToEmpty();
}
inline const std::string& login_msg::user() const {
  // @@protoc_insertion_point(field_get:zftp_message.login_msg.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void login_msg::set_user(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zftp_message.login_msg.user)
}
inline std::string* login_msg::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:zftp_message.login_msg.user)
  return _s;
}
inline const std::string& login_msg::_internal_user() const {
  return _impl_.user_.Get();
}
inline void login_msg::_internal_set_user(const std::string& value) {
  
  _impl_.user_.Set(value, GetArenaForAllocation());
}
inline std::string* login_msg::_internal_mutable_user() {
  
  return _impl_.user_.Mutable(GetArenaForAllocation());
}
inline std::string* login_msg::release_user() {
  // @@protoc_insertion_point(field_release:zftp_message.login_msg.user)
  return _impl_.user_.Release();
}
inline void login_msg::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  _impl_.user_.SetAllocated(user, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_.IsDefault()) {
    _impl_.user_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zftp_message.login_msg.user)
}

// string passwd = 2;
inline void login_msg::clear_passwd() {
  _impl_.passwd_.ClearToEmpty();
}
inline const std::string& login_msg::passwd() const {
  // @@protoc_insertion_point(field_get:zftp_message.login_msg.passwd)
  return _internal_passwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void login_msg::set_passwd(ArgT0&& arg0, ArgT... args) {
 
 _impl_.passwd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zftp_message.login_msg.passwd)
}
inline std::string* login_msg::mutable_passwd() {
  std::string* _s = _internal_mutable_passwd();
  // @@protoc_insertion_point(field_mutable:zftp_message.login_msg.passwd)
  return _s;
}
inline const std::string& login_msg::_internal_passwd() const {
  return _impl_.passwd_.Get();
}
inline void login_msg::_internal_set_passwd(const std::string& value) {
  
  _impl_.passwd_.Set(value, GetArenaForAllocation());
}
inline std::string* login_msg::_internal_mutable_passwd() {
  
  return _impl_.passwd_.Mutable(GetArenaForAllocation());
}
inline std::string* login_msg::release_passwd() {
  // @@protoc_insertion_point(field_release:zftp_message.login_msg.passwd)
  return _impl_.passwd_.Release();
}
inline void login_msg::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  _impl_.passwd_.SetAllocated(passwd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.passwd_.IsDefault()) {
    _impl_.passwd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zftp_message.login_msg.passwd)
}

// -------------------------------------------------------------------

// mkdir_msg

// string data = 1;
inline void mkdir_msg::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& mkdir_msg::data() const {
  // @@protoc_insertion_point(field_get:zftp_message.mkdir_msg.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mkdir_msg::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zftp_message.mkdir_msg.data)
}
inline std::string* mkdir_msg::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:zftp_message.mkdir_msg.data)
  return _s;
}
inline const std::string& mkdir_msg::_internal_data() const {
  return _impl_.data_.Get();
}
inline void mkdir_msg::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* mkdir_msg::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* mkdir_msg::release_data() {
  // @@protoc_insertion_point(field_release:zftp_message.mkdir_msg.data)
  return _impl_.data_.Release();
}
inline void mkdir_msg::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zftp_message.mkdir_msg.data)
}

// -------------------------------------------------------------------

// cd_msg

// string dir = 1;
inline void cd_msg::clear_dir() {
  _impl_.dir_.ClearToEmpty();
}
inline const std::string& cd_msg::dir() const {
  // @@protoc_insertion_point(field_get:zftp_message.cd_msg.dir)
  return _internal_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void cd_msg::set_dir(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dir_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zftp_message.cd_msg.dir)
}
inline std::string* cd_msg::mutable_dir() {
  std::string* _s = _internal_mutable_dir();
  // @@protoc_insertion_point(field_mutable:zftp_message.cd_msg.dir)
  return _s;
}
inline const std::string& cd_msg::_internal_dir() const {
  return _impl_.dir_.Get();
}
inline void cd_msg::_internal_set_dir(const std::string& value) {
  
  _impl_.dir_.Set(value, GetArenaForAllocation());
}
inline std::string* cd_msg::_internal_mutable_dir() {
  
  return _impl_.dir_.Mutable(GetArenaForAllocation());
}
inline std::string* cd_msg::release_dir() {
  // @@protoc_insertion_point(field_release:zftp_message.cd_msg.dir)
  return _impl_.dir_.Release();
}
inline void cd_msg::set_allocated_dir(std::string* dir) {
  if (dir != nullptr) {
    
  } else {
    
  }
  _impl_.dir_.SetAllocated(dir, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dir_.IsDefault()) {
    _impl_.dir_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zftp_message.cd_msg.dir)
}

// -------------------------------------------------------------------

// ls_msg

// string data = 1;
inline void ls_msg::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ls_msg::data() const {
  // @@protoc_insertion_point(field_get:zftp_message.ls_msg.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ls_msg::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zftp_message.ls_msg.data)
}
inline std::string* ls_msg::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:zftp_message.ls_msg.data)
  return _s;
}
inline const std::string& ls_msg::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ls_msg::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ls_msg::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* ls_msg::release_data() {
  // @@protoc_insertion_point(field_release:zftp_message.ls_msg.data)
  return _impl_.data_.Release();
}
inline void ls_msg::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zftp_message.ls_msg.data)
}

// -------------------------------------------------------------------

// ls_response_node

// int32 id = 1;
inline void ls_response_node::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t ls_response_node::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ls_response_node::id() const {
  // @@protoc_insertion_point(field_get:zftp_message.ls_response.node.id)
  return _internal_id();
}
inline void ls_response_node::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void ls_response_node::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:zftp_message.ls_response.node.id)
}

// int32 type = 2;
inline void ls_response_node::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t ls_response_node::_internal_type() const {
  return _impl_.type_;
}
inline int32_t ls_response_node::type() const {
  // @@protoc_insertion_point(field_get:zftp_message.ls_response.node.type)
  return _internal_type();
}
inline void ls_response_node::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void ls_response_node::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:zftp_message.ls_response.node.type)
}

// int32 size = 3;
inline void ls_response_node::clear_size() {
  _impl_.size_ = 0;
}
inline int32_t ls_response_node::_internal_size() const {
  return _impl_.size_;
}
inline int32_t ls_response_node::size() const {
  // @@protoc_insertion_point(field_get:zftp_message.ls_response.node.size)
  return _internal_size();
}
inline void ls_response_node::_internal_set_size(int32_t value) {
  
  _impl_.size_ = value;
}
inline void ls_response_node::set_size(int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:zftp_message.ls_response.node.size)
}

// string name = 4;
inline void ls_response_node::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ls_response_node::name() const {
  // @@protoc_insertion_point(field_get:zftp_message.ls_response.node.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ls_response_node::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zftp_message.ls_response.node.name)
}
inline std::string* ls_response_node::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:zftp_message.ls_response.node.name)
  return _s;
}
inline const std::string& ls_response_node::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ls_response_node::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ls_response_node::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ls_response_node::release_name() {
  // @@protoc_insertion_point(field_release:zftp_message.ls_response.node.name)
  return _impl_.name_.Release();
}
inline void ls_response_node::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zftp_message.ls_response.node.name)
}

// -------------------------------------------------------------------

// ls_response

// repeated .zftp_message.ls_response.node list = 1;
inline int ls_response::_internal_list_size() const {
  return _impl_.list_.size();
}
inline int ls_response::list_size() const {
  return _internal_list_size();
}
inline void ls_response::clear_list() {
  _impl_.list_.Clear();
}
inline ::zftp_message::ls_response_node* ls_response::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:zftp_message.ls_response.list)
  return _impl_.list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zftp_message::ls_response_node >*
ls_response::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:zftp_message.ls_response.list)
  return &_impl_.list_;
}
inline const ::zftp_message::ls_response_node& ls_response::_internal_list(int index) const {
  return _impl_.list_.Get(index);
}
inline const ::zftp_message::ls_response_node& ls_response::list(int index) const {
  // @@protoc_insertion_point(field_get:zftp_message.ls_response.list)
  return _internal_list(index);
}
inline ::zftp_message::ls_response_node* ls_response::_internal_add_list() {
  return _impl_.list_.Add();
}
inline ::zftp_message::ls_response_node* ls_response::add_list() {
  ::zftp_message::ls_response_node* _add = _internal_add_list();
  // @@protoc_insertion_point(field_add:zftp_message.ls_response.list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zftp_message::ls_response_node >&
ls_response::list() const {
  // @@protoc_insertion_point(field_list:zftp_message.ls_response.list)
  return _impl_.list_;
}

// int32 ok = 2;
inline void ls_response::clear_ok() {
  _impl_.ok_ = 0;
}
inline int32_t ls_response::_internal_ok() const {
  return _impl_.ok_;
}
inline int32_t ls_response::ok() const {
  // @@protoc_insertion_point(field_get:zftp_message.ls_response.ok)
  return _internal_ok();
}
inline void ls_response::_internal_set_ok(int32_t value) {
  
  _impl_.ok_ = value;
}
inline void ls_response::set_ok(int32_t value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:zftp_message.ls_response.ok)
}

// string error = 3;
inline void ls_response::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& ls_response::error() const {
  // @@protoc_insertion_point(field_get:zftp_message.ls_response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ls_response::set_error(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zftp_message.ls_response.error)
}
inline std::string* ls_response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:zftp_message.ls_response.error)
  return _s;
}
inline const std::string& ls_response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void ls_response::_internal_set_error(const std::string& value) {
  
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* ls_response::_internal_mutable_error() {
  
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* ls_response::release_error() {
  // @@protoc_insertion_point(field_release:zftp_message.ls_response.error)
  return _impl_.error_.Release();
}
inline void ls_response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zftp_message.ls_response.error)
}

// -------------------------------------------------------------------

// rm_msg

// bool force = 1;
inline void rm_msg::clear_force() {
  _impl_.force_ = false;
}
inline bool rm_msg::_internal_force() const {
  return _impl_.force_;
}
inline bool rm_msg::force() const {
  // @@protoc_insertion_point(field_get:zftp_message.rm_msg.force)
  return _internal_force();
}
inline void rm_msg::_internal_set_force(bool value) {
  
  _impl_.force_ = value;
}
inline void rm_msg::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:zftp_message.rm_msg.force)
}

// bool recursion = 2;
inline void rm_msg::clear_recursion() {
  _impl_.recursion_ = false;
}
inline bool rm_msg::_internal_recursion() const {
  return _impl_.recursion_;
}
inline bool rm_msg::recursion() const {
  // @@protoc_insertion_point(field_get:zftp_message.rm_msg.recursion)
  return _internal_recursion();
}
inline void rm_msg::_internal_set_recursion(bool value) {
  
  _impl_.recursion_ = value;
}
inline void rm_msg::set_recursion(bool value) {
  _internal_set_recursion(value);
  // @@protoc_insertion_point(field_set:zftp_message.rm_msg.recursion)
}

// string file_name = 3;
inline void rm_msg::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& rm_msg::file_name() const {
  // @@protoc_insertion_point(field_get:zftp_message.rm_msg.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void rm_msg::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zftp_message.rm_msg.file_name)
}
inline std::string* rm_msg::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:zftp_message.rm_msg.file_name)
  return _s;
}
inline const std::string& rm_msg::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void rm_msg::_internal_set_file_name(const std::string& value) {
  
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* rm_msg::_internal_mutable_file_name() {
  
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* rm_msg::release_file_name() {
  // @@protoc_insertion_point(field_release:zftp_message.rm_msg.file_name)
  return _impl_.file_name_.Release();
}
inline void rm_msg::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zftp_message.rm_msg.file_name)
}

// -------------------------------------------------------------------

// pull_msg

// string name = 1;
inline void pull_msg::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& pull_msg::name() const {
  // @@protoc_insertion_point(field_get:zftp_message.pull_msg.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pull_msg::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zftp_message.pull_msg.name)
}
inline std::string* pull_msg::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:zftp_message.pull_msg.name)
  return _s;
}
inline const std::string& pull_msg::_internal_name() const {
  return _impl_.name_.Get();
}
inline void pull_msg::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* pull_msg::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* pull_msg::release_name() {
  // @@protoc_insertion_point(field_release:zftp_message.pull_msg.name)
  return _impl_.name_.Release();
}
inline void pull_msg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zftp_message.pull_msg.name)
}

// string dstName = 2;
inline void pull_msg::clear_dstname() {
  _impl_.dstname_.ClearToEmpty();
}
inline const std::string& pull_msg::dstname() const {
  // @@protoc_insertion_point(field_get:zftp_message.pull_msg.dstName)
  return _internal_dstname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pull_msg::set_dstname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dstname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zftp_message.pull_msg.dstName)
}
inline std::string* pull_msg::mutable_dstname() {
  std::string* _s = _internal_mutable_dstname();
  // @@protoc_insertion_point(field_mutable:zftp_message.pull_msg.dstName)
  return _s;
}
inline const std::string& pull_msg::_internal_dstname() const {
  return _impl_.dstname_.Get();
}
inline void pull_msg::_internal_set_dstname(const std::string& value) {
  
  _impl_.dstname_.Set(value, GetArenaForAllocation());
}
inline std::string* pull_msg::_internal_mutable_dstname() {
  
  return _impl_.dstname_.Mutable(GetArenaForAllocation());
}
inline std::string* pull_msg::release_dstname() {
  // @@protoc_insertion_point(field_release:zftp_message.pull_msg.dstName)
  return _impl_.dstname_.Release();
}
inline void pull_msg::set_allocated_dstname(std::string* dstname) {
  if (dstname != nullptr) {
    
  } else {
    
  }
  _impl_.dstname_.SetAllocated(dstname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dstname_.IsDefault()) {
    _impl_.dstname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zftp_message.pull_msg.dstName)
}

// string src_dir = 3;
inline void pull_msg::clear_src_dir() {
  _impl_.src_dir_.ClearToEmpty();
}
inline const std::string& pull_msg::src_dir() const {
  // @@protoc_insertion_point(field_get:zftp_message.pull_msg.src_dir)
  return _internal_src_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pull_msg::set_src_dir(ArgT0&& arg0, ArgT... args) {
 
 _impl_.src_dir_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zftp_message.pull_msg.src_dir)
}
inline std::string* pull_msg::mutable_src_dir() {
  std::string* _s = _internal_mutable_src_dir();
  // @@protoc_insertion_point(field_mutable:zftp_message.pull_msg.src_dir)
  return _s;
}
inline const std::string& pull_msg::_internal_src_dir() const {
  return _impl_.src_dir_.Get();
}
inline void pull_msg::_internal_set_src_dir(const std::string& value) {
  
  _impl_.src_dir_.Set(value, GetArenaForAllocation());
}
inline std::string* pull_msg::_internal_mutable_src_dir() {
  
  return _impl_.src_dir_.Mutable(GetArenaForAllocation());
}
inline std::string* pull_msg::release_src_dir() {
  // @@protoc_insertion_point(field_release:zftp_message.pull_msg.src_dir)
  return _impl_.src_dir_.Release();
}
inline void pull_msg::set_allocated_src_dir(std::string* src_dir) {
  if (src_dir != nullptr) {
    
  } else {
    
  }
  _impl_.src_dir_.SetAllocated(src_dir, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.src_dir_.IsDefault()) {
    _impl_.src_dir_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zftp_message.pull_msg.src_dir)
}

// -------------------------------------------------------------------

// pull_respon_msg

// bool ok = 1;
inline void pull_respon_msg::clear_ok() {
  _impl_.ok_ = false;
}
inline bool pull_respon_msg::_internal_ok() const {
  return _impl_.ok_;
}
inline bool pull_respon_msg::ok() const {
  // @@protoc_insertion_point(field_get:zftp_message.pull_respon_msg.ok)
  return _internal_ok();
}
inline void pull_respon_msg::_internal_set_ok(bool value) {
  
  _impl_.ok_ = value;
}
inline void pull_respon_msg::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:zftp_message.pull_respon_msg.ok)
}

// bytes data = 2;
inline void pull_respon_msg::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& pull_respon_msg::data() const {
  // @@protoc_insertion_point(field_get:zftp_message.pull_respon_msg.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pull_respon_msg::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zftp_message.pull_respon_msg.data)
}
inline std::string* pull_respon_msg::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:zftp_message.pull_respon_msg.data)
  return _s;
}
inline const std::string& pull_respon_msg::_internal_data() const {
  return _impl_.data_.Get();
}
inline void pull_respon_msg::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* pull_respon_msg::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* pull_respon_msg::release_data() {
  // @@protoc_insertion_point(field_release:zftp_message.pull_respon_msg.data)
  return _impl_.data_.Release();
}
inline void pull_respon_msg::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zftp_message.pull_respon_msg.data)
}

// string save_name = 3;
inline void pull_respon_msg::clear_save_name() {
  _impl_.save_name_.ClearToEmpty();
}
inline const std::string& pull_respon_msg::save_name() const {
  // @@protoc_insertion_point(field_get:zftp_message.pull_respon_msg.save_name)
  return _internal_save_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pull_respon_msg::set_save_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.save_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zftp_message.pull_respon_msg.save_name)
}
inline std::string* pull_respon_msg::mutable_save_name() {
  std::string* _s = _internal_mutable_save_name();
  // @@protoc_insertion_point(field_mutable:zftp_message.pull_respon_msg.save_name)
  return _s;
}
inline const std::string& pull_respon_msg::_internal_save_name() const {
  return _impl_.save_name_.Get();
}
inline void pull_respon_msg::_internal_set_save_name(const std::string& value) {
  
  _impl_.save_name_.Set(value, GetArenaForAllocation());
}
inline std::string* pull_respon_msg::_internal_mutable_save_name() {
  
  return _impl_.save_name_.Mutable(GetArenaForAllocation());
}
inline std::string* pull_respon_msg::release_save_name() {
  // @@protoc_insertion_point(field_release:zftp_message.pull_respon_msg.save_name)
  return _impl_.save_name_.Release();
}
inline void pull_respon_msg::set_allocated_save_name(std::string* save_name) {
  if (save_name != nullptr) {
    
  } else {
    
  }
  _impl_.save_name_.SetAllocated(save_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.save_name_.IsDefault()) {
    _impl_.save_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zftp_message.pull_respon_msg.save_name)
}

// -------------------------------------------------------------------

// push_msg

// bytes data = 1;
inline void push_msg::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& push_msg::data() const {
  // @@protoc_insertion_point(field_get:zftp_message.push_msg.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void push_msg::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zftp_message.push_msg.data)
}
inline std::string* push_msg::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:zftp_message.push_msg.data)
  return _s;
}
inline const std::string& push_msg::_internal_data() const {
  return _impl_.data_.Get();
}
inline void push_msg::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* push_msg::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* push_msg::release_data() {
  // @@protoc_insertion_point(field_release:zftp_message.push_msg.data)
  return _impl_.data_.Release();
}
inline void push_msg::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zftp_message.push_msg.data)
}

// string dst_name = 2;
inline void push_msg::clear_dst_name() {
  _impl_.dst_name_.ClearToEmpty();
}
inline const std::string& push_msg::dst_name() const {
  // @@protoc_insertion_point(field_get:zftp_message.push_msg.dst_name)
  return _internal_dst_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void push_msg::set_dst_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dst_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zftp_message.push_msg.dst_name)
}
inline std::string* push_msg::mutable_dst_name() {
  std::string* _s = _internal_mutable_dst_name();
  // @@protoc_insertion_point(field_mutable:zftp_message.push_msg.dst_name)
  return _s;
}
inline const std::string& push_msg::_internal_dst_name() const {
  return _impl_.dst_name_.Get();
}
inline void push_msg::_internal_set_dst_name(const std::string& value) {
  
  _impl_.dst_name_.Set(value, GetArenaForAllocation());
}
inline std::string* push_msg::_internal_mutable_dst_name() {
  
  return _impl_.dst_name_.Mutable(GetArenaForAllocation());
}
inline std::string* push_msg::release_dst_name() {
  // @@protoc_insertion_point(field_release:zftp_message.push_msg.dst_name)
  return _impl_.dst_name_.Release();
}
inline void push_msg::set_allocated_dst_name(std::string* dst_name) {
  if (dst_name != nullptr) {
    
  } else {
    
  }
  _impl_.dst_name_.SetAllocated(dst_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dst_name_.IsDefault()) {
    _impl_.dst_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zftp_message.push_msg.dst_name)
}

// bool force = 3;
inline void push_msg::clear_force() {
  _impl_.force_ = false;
}
inline bool push_msg::_internal_force() const {
  return _impl_.force_;
}
inline bool push_msg::force() const {
  // @@protoc_insertion_point(field_get:zftp_message.push_msg.force)
  return _internal_force();
}
inline void push_msg::_internal_set_force(bool value) {
  
  _impl_.force_ = value;
}
inline void push_msg::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:zftp_message.push_msg.force)
}

// string src_name = 4;
inline void push_msg::clear_src_name() {
  _impl_.src_name_.ClearToEmpty();
}
inline const std::string& push_msg::src_name() const {
  // @@protoc_insertion_point(field_get:zftp_message.push_msg.src_name)
  return _internal_src_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void push_msg::set_src_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.src_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zftp_message.push_msg.src_name)
}
inline std::string* push_msg::mutable_src_name() {
  std::string* _s = _internal_mutable_src_name();
  // @@protoc_insertion_point(field_mutable:zftp_message.push_msg.src_name)
  return _s;
}
inline const std::string& push_msg::_internal_src_name() const {
  return _impl_.src_name_.Get();
}
inline void push_msg::_internal_set_src_name(const std::string& value) {
  
  _impl_.src_name_.Set(value, GetArenaForAllocation());
}
inline std::string* push_msg::_internal_mutable_src_name() {
  
  return _impl_.src_name_.Mutable(GetArenaForAllocation());
}
inline std::string* push_msg::release_src_name() {
  // @@protoc_insertion_point(field_release:zftp_message.push_msg.src_name)
  return _impl_.src_name_.Release();
}
inline void push_msg::set_allocated_src_name(std::string* src_name) {
  if (src_name != nullptr) {
    
  } else {
    
  }
  _impl_.src_name_.SetAllocated(src_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.src_name_.IsDefault()) {
    _impl_.src_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zftp_message.push_msg.src_name)
}

// -------------------------------------------------------------------

// response_msg

// bool ok = 1;
inline void response_msg::clear_ok() {
  _impl_.ok_ = false;
}
inline bool response_msg::_internal_ok() const {
  return _impl_.ok_;
}
inline bool response_msg::ok() const {
  // @@protoc_insertion_point(field_get:zftp_message.response_msg.ok)
  return _internal_ok();
}
inline void response_msg::_internal_set_ok(bool value) {
  
  _impl_.ok_ = value;
}
inline void response_msg::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:zftp_message.response_msg.ok)
}

// string error = 2;
inline void response_msg::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& response_msg::error() const {
  // @@protoc_insertion_point(field_get:zftp_message.response_msg.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void response_msg::set_error(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:zftp_message.response_msg.error)
}
inline std::string* response_msg::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:zftp_message.response_msg.error)
  return _s;
}
inline const std::string& response_msg::_internal_error() const {
  return _impl_.error_.Get();
}
inline void response_msg::_internal_set_error(const std::string& value) {
  
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* response_msg::_internal_mutable_error() {
  
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* response_msg::release_error() {
  // @@protoc_insertion_point(field_release:zftp_message.response_msg.error)
  return _impl_.error_.Release();
}
inline void response_msg::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:zftp_message.response_msg.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zftp_message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zlk_5fmessage_2eproto
