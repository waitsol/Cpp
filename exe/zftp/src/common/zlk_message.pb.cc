// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zlk_message.proto

#include "zlk_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace zftp_message {
PROTOBUF_CONSTEXPR Pakcet::Pakcet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msgbody_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msgid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PakcetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PakcetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PakcetDefaultTypeInternal() {}
  union {
    Pakcet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PakcetDefaultTypeInternal _Pakcet_default_instance_;
PROTOBUF_CONSTEXPR mkdir_msg::mkdir_msg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct mkdir_msgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR mkdir_msgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~mkdir_msgDefaultTypeInternal() {}
  union {
    mkdir_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 mkdir_msgDefaultTypeInternal _mkdir_msg_default_instance_;
PROTOBUF_CONSTEXPR rm_msg::rm_msg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.force_)*/false
  , /*decltype(_impl_.recursion_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct rm_msgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR rm_msgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~rm_msgDefaultTypeInternal() {}
  union {
    rm_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 rm_msgDefaultTypeInternal _rm_msg_default_instance_;
PROTOBUF_CONSTEXPR pull_msg::pull_msg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct pull_msgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR pull_msgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~pull_msgDefaultTypeInternal() {}
  union {
    pull_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 pull_msgDefaultTypeInternal _pull_msg_default_instance_;
PROTOBUF_CONSTEXPR pull_respon_msg::pull_respon_msg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ok_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct pull_respon_msgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR pull_respon_msgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~pull_respon_msgDefaultTypeInternal() {}
  union {
    pull_respon_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 pull_respon_msgDefaultTypeInternal _pull_respon_msg_default_instance_;
PROTOBUF_CONSTEXPR push_msg::push_msg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.force_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct push_msgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR push_msgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~push_msgDefaultTypeInternal() {}
  union {
    push_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 push_msgDefaultTypeInternal _push_msg_default_instance_;
PROTOBUF_CONSTEXPR response_msg::response_msg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ok_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct response_msgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR response_msgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~response_msgDefaultTypeInternal() {}
  union {
    response_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 response_msgDefaultTypeInternal _response_msg_default_instance_;
}  // namespace zftp_message
static ::_pb::Metadata file_level_metadata_zlk_5fmessage_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_zlk_5fmessage_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_zlk_5fmessage_2eproto = nullptr;

const uint32_t TableStruct_zlk_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zftp_message::Pakcet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zftp_message::Pakcet, _impl_.msgid_),
  PROTOBUF_FIELD_OFFSET(::zftp_message::Pakcet, _impl_.msgbody_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zftp_message::mkdir_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zftp_message::mkdir_msg, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zftp_message::rm_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zftp_message::rm_msg, _impl_.force_),
  PROTOBUF_FIELD_OFFSET(::zftp_message::rm_msg, _impl_.recursion_),
  PROTOBUF_FIELD_OFFSET(::zftp_message::rm_msg, _impl_.file_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zftp_message::pull_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zftp_message::pull_msg, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zftp_message::pull_respon_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zftp_message::pull_respon_msg, _impl_.ok_),
  PROTOBUF_FIELD_OFFSET(::zftp_message::pull_respon_msg, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zftp_message::push_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zftp_message::push_msg, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::zftp_message::push_msg, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::zftp_message::push_msg, _impl_.force_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zftp_message::response_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zftp_message::response_msg, _impl_.ok_),
  PROTOBUF_FIELD_OFFSET(::zftp_message::response_msg, _impl_.error_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::zftp_message::Pakcet)},
  { 8, -1, -1, sizeof(::zftp_message::mkdir_msg)},
  { 15, -1, -1, sizeof(::zftp_message::rm_msg)},
  { 24, -1, -1, sizeof(::zftp_message::pull_msg)},
  { 31, -1, -1, sizeof(::zftp_message::pull_respon_msg)},
  { 39, -1, -1, sizeof(::zftp_message::push_msg)},
  { 48, -1, -1, sizeof(::zftp_message::response_msg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::zftp_message::_Pakcet_default_instance_._instance,
  &::zftp_message::_mkdir_msg_default_instance_._instance,
  &::zftp_message::_rm_msg_default_instance_._instance,
  &::zftp_message::_pull_msg_default_instance_._instance,
  &::zftp_message::_pull_respon_msg_default_instance_._instance,
  &::zftp_message::_push_msg_default_instance_._instance,
  &::zftp_message::_response_msg_default_instance_._instance,
};

const char descriptor_table_protodef_zlk_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021zlk_message.proto\022\014zftp_message\"(\n\006Pak"
  "cet\022\r\n\005msgId\030\001 \001(\005\022\017\n\007msgBody\030\002 \001(\t\"\031\n\tm"
  "kdir_msg\022\014\n\004data\030\001 \001(\t\"=\n\006rm_msg\022\r\n\005forc"
  "e\030\001 \001(\010\022\021\n\trecursion\030\002 \001(\010\022\021\n\tfile_name\030"
  "\003 \001(\t\"\030\n\010pull_msg\022\014\n\004name\030\001 \001(\t\"+\n\017pull_"
  "respon_msg\022\n\n\002ok\030\001 \001(\010\022\014\n\004data\030\002 \001(\014\"5\n\010"
  "push_msg\022\014\n\004data\030\001 \001(\014\022\014\n\004name\030\002 \001(\t\022\r\n\005"
  "force\030\003 \001(\010\")\n\014response_msg\022\n\n\002ok\030\001 \001(\010\022"
  "\r\n\005error\030\002 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_zlk_5fmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_zlk_5fmessage_2eproto = {
    false, false, 342, descriptor_table_protodef_zlk_5fmessage_2eproto,
    "zlk_message.proto",
    &descriptor_table_zlk_5fmessage_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_zlk_5fmessage_2eproto::offsets,
    file_level_metadata_zlk_5fmessage_2eproto, file_level_enum_descriptors_zlk_5fmessage_2eproto,
    file_level_service_descriptors_zlk_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_zlk_5fmessage_2eproto_getter() {
  return &descriptor_table_zlk_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_zlk_5fmessage_2eproto(&descriptor_table_zlk_5fmessage_2eproto);
namespace zftp_message {

// ===================================================================

class Pakcet::_Internal {
 public:
};

Pakcet::Pakcet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zftp_message.Pakcet)
}
Pakcet::Pakcet(const Pakcet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pakcet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msgbody_){}
    , decltype(_impl_.msgid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msgbody_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgbody_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msgbody().empty()) {
    _this->_impl_.msgbody_.Set(from._internal_msgbody(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.msgid_ = from._impl_.msgid_;
  // @@protoc_insertion_point(copy_constructor:zftp_message.Pakcet)
}

inline void Pakcet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msgbody_){}
    , decltype(_impl_.msgid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msgbody_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgbody_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Pakcet::~Pakcet() {
  // @@protoc_insertion_point(destructor:zftp_message.Pakcet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pakcet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msgbody_.Destroy();
}

void Pakcet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pakcet::Clear() {
// @@protoc_insertion_point(message_clear_start:zftp_message.Pakcet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msgbody_.ClearToEmpty();
  _impl_.msgid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pakcet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 msgId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msgBody = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msgbody();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zftp_message.Pakcet.msgBody"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pakcet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zftp_message.Pakcet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgId = 1;
  if (this->_internal_msgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_msgid(), target);
  }

  // string msgBody = 2;
  if (!this->_internal_msgbody().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msgbody().data(), static_cast<int>(this->_internal_msgbody().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zftp_message.Pakcet.msgBody");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msgbody(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zftp_message.Pakcet)
  return target;
}

size_t Pakcet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zftp_message.Pakcet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msgBody = 2;
  if (!this->_internal_msgbody().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msgbody());
  }

  // int32 msgId = 1;
  if (this->_internal_msgid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msgid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pakcet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pakcet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pakcet::GetClassData() const { return &_class_data_; }


void Pakcet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pakcet*>(&to_msg);
  auto& from = static_cast<const Pakcet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zftp_message.Pakcet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msgbody().empty()) {
    _this->_internal_set_msgbody(from._internal_msgbody());
  }
  if (from._internal_msgid() != 0) {
    _this->_internal_set_msgid(from._internal_msgid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pakcet::CopyFrom(const Pakcet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zftp_message.Pakcet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pakcet::IsInitialized() const {
  return true;
}

void Pakcet::InternalSwap(Pakcet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msgbody_, lhs_arena,
      &other->_impl_.msgbody_, rhs_arena
  );
  swap(_impl_.msgid_, other->_impl_.msgid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pakcet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zlk_5fmessage_2eproto_getter, &descriptor_table_zlk_5fmessage_2eproto_once,
      file_level_metadata_zlk_5fmessage_2eproto[0]);
}

// ===================================================================

class mkdir_msg::_Internal {
 public:
};

mkdir_msg::mkdir_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zftp_message.mkdir_msg)
}
mkdir_msg::mkdir_msg(const mkdir_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  mkdir_msg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zftp_message.mkdir_msg)
}

inline void mkdir_msg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

mkdir_msg::~mkdir_msg() {
  // @@protoc_insertion_point(destructor:zftp_message.mkdir_msg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void mkdir_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void mkdir_msg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void mkdir_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:zftp_message.mkdir_msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mkdir_msg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zftp_message.mkdir_msg.data"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mkdir_msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zftp_message.mkdir_msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zftp_message.mkdir_msg.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zftp_message.mkdir_msg)
  return target;
}

size_t mkdir_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zftp_message.mkdir_msg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mkdir_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    mkdir_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mkdir_msg::GetClassData() const { return &_class_data_; }


void mkdir_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<mkdir_msg*>(&to_msg);
  auto& from = static_cast<const mkdir_msg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zftp_message.mkdir_msg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mkdir_msg::CopyFrom(const mkdir_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zftp_message.mkdir_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mkdir_msg::IsInitialized() const {
  return true;
}

void mkdir_msg::InternalSwap(mkdir_msg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata mkdir_msg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zlk_5fmessage_2eproto_getter, &descriptor_table_zlk_5fmessage_2eproto_once,
      file_level_metadata_zlk_5fmessage_2eproto[1]);
}

// ===================================================================

class rm_msg::_Internal {
 public:
};

rm_msg::rm_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zftp_message.rm_msg)
}
rm_msg::rm_msg(const rm_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  rm_msg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_){}
    , decltype(_impl_.force_){}
    , decltype(_impl_.recursion_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.force_, &from._impl_.force_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.recursion_) -
    reinterpret_cast<char*>(&_impl_.force_)) + sizeof(_impl_.recursion_));
  // @@protoc_insertion_point(copy_constructor:zftp_message.rm_msg)
}

inline void rm_msg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_){}
    , decltype(_impl_.force_){false}
    , decltype(_impl_.recursion_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

rm_msg::~rm_msg() {
  // @@protoc_insertion_point(destructor:zftp_message.rm_msg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void rm_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_name_.Destroy();
}

void rm_msg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void rm_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:zftp_message.rm_msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_name_.ClearToEmpty();
  ::memset(&_impl_.force_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.recursion_) -
      reinterpret_cast<char*>(&_impl_.force_)) + sizeof(_impl_.recursion_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* rm_msg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool force = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool recursion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.recursion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zftp_message.rm_msg.file_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* rm_msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zftp_message.rm_msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool force = 1;
  if (this->_internal_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_force(), target);
  }

  // bool recursion = 2;
  if (this->_internal_recursion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_recursion(), target);
  }

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zftp_message.rm_msg.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zftp_message.rm_msg)
  return target;
}

size_t rm_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zftp_message.rm_msg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 3;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // bool force = 1;
  if (this->_internal_force() != 0) {
    total_size += 1 + 1;
  }

  // bool recursion = 2;
  if (this->_internal_recursion() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData rm_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    rm_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*rm_msg::GetClassData() const { return &_class_data_; }


void rm_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<rm_msg*>(&to_msg);
  auto& from = static_cast<const rm_msg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zftp_message.rm_msg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_force() != 0) {
    _this->_internal_set_force(from._internal_force());
  }
  if (from._internal_recursion() != 0) {
    _this->_internal_set_recursion(from._internal_recursion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void rm_msg::CopyFrom(const rm_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zftp_message.rm_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rm_msg::IsInitialized() const {
  return true;
}

void rm_msg::InternalSwap(rm_msg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(rm_msg, _impl_.recursion_)
      + sizeof(rm_msg::_impl_.recursion_)
      - PROTOBUF_FIELD_OFFSET(rm_msg, _impl_.force_)>(
          reinterpret_cast<char*>(&_impl_.force_),
          reinterpret_cast<char*>(&other->_impl_.force_));
}

::PROTOBUF_NAMESPACE_ID::Metadata rm_msg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zlk_5fmessage_2eproto_getter, &descriptor_table_zlk_5fmessage_2eproto_once,
      file_level_metadata_zlk_5fmessage_2eproto[2]);
}

// ===================================================================

class pull_msg::_Internal {
 public:
};

pull_msg::pull_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zftp_message.pull_msg)
}
pull_msg::pull_msg(const pull_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  pull_msg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zftp_message.pull_msg)
}

inline void pull_msg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

pull_msg::~pull_msg() {
  // @@protoc_insertion_point(destructor:zftp_message.pull_msg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void pull_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void pull_msg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void pull_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:zftp_message.pull_msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pull_msg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zftp_message.pull_msg.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* pull_msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zftp_message.pull_msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zftp_message.pull_msg.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zftp_message.pull_msg)
  return target;
}

size_t pull_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zftp_message.pull_msg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData pull_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    pull_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*pull_msg::GetClassData() const { return &_class_data_; }


void pull_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<pull_msg*>(&to_msg);
  auto& from = static_cast<const pull_msg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zftp_message.pull_msg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void pull_msg::CopyFrom(const pull_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zftp_message.pull_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pull_msg::IsInitialized() const {
  return true;
}

void pull_msg::InternalSwap(pull_msg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata pull_msg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zlk_5fmessage_2eproto_getter, &descriptor_table_zlk_5fmessage_2eproto_once,
      file_level_metadata_zlk_5fmessage_2eproto[3]);
}

// ===================================================================

class pull_respon_msg::_Internal {
 public:
};

pull_respon_msg::pull_respon_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zftp_message.pull_respon_msg)
}
pull_respon_msg::pull_respon_msg(const pull_respon_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  pull_respon_msg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.ok_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ok_ = from._impl_.ok_;
  // @@protoc_insertion_point(copy_constructor:zftp_message.pull_respon_msg)
}

inline void pull_respon_msg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.ok_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

pull_respon_msg::~pull_respon_msg() {
  // @@protoc_insertion_point(destructor:zftp_message.pull_respon_msg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void pull_respon_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void pull_respon_msg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void pull_respon_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:zftp_message.pull_respon_msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pull_respon_msg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* pull_respon_msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zftp_message.pull_respon_msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zftp_message.pull_respon_msg)
  return target;
}

size_t pull_respon_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zftp_message.pull_respon_msg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData pull_respon_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    pull_respon_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*pull_respon_msg::GetClassData() const { return &_class_data_; }


void pull_respon_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<pull_respon_msg*>(&to_msg);
  auto& from = static_cast<const pull_respon_msg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zftp_message.pull_respon_msg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_ok() != 0) {
    _this->_internal_set_ok(from._internal_ok());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void pull_respon_msg::CopyFrom(const pull_respon_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zftp_message.pull_respon_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pull_respon_msg::IsInitialized() const {
  return true;
}

void pull_respon_msg::InternalSwap(pull_respon_msg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.ok_, other->_impl_.ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata pull_respon_msg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zlk_5fmessage_2eproto_getter, &descriptor_table_zlk_5fmessage_2eproto_once,
      file_level_metadata_zlk_5fmessage_2eproto[4]);
}

// ===================================================================

class push_msg::_Internal {
 public:
};

push_msg::push_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zftp_message.push_msg)
}
push_msg::push_msg(const push_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  push_msg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.force_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.force_ = from._impl_.force_;
  // @@protoc_insertion_point(copy_constructor:zftp_message.push_msg)
}

inline void push_msg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.force_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

push_msg::~push_msg() {
  // @@protoc_insertion_point(destructor:zftp_message.push_msg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void push_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  _impl_.name_.Destroy();
}

void push_msg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void push_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:zftp_message.push_msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.force_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* push_msg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zftp_message.push_msg.name"));
        } else
          goto handle_unusual;
        continue;
      // bool force = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* push_msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zftp_message.push_msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zftp_message.push_msg.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bool force = 3;
  if (this->_internal_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_force(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zftp_message.push_msg)
  return target;
}

size_t push_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zftp_message.push_msg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool force = 3;
  if (this->_internal_force() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData push_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    push_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*push_msg::GetClassData() const { return &_class_data_; }


void push_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<push_msg*>(&to_msg);
  auto& from = static_cast<const push_msg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zftp_message.push_msg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_force() != 0) {
    _this->_internal_set_force(from._internal_force());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void push_msg::CopyFrom(const push_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zftp_message.push_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool push_msg::IsInitialized() const {
  return true;
}

void push_msg::InternalSwap(push_msg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.force_, other->_impl_.force_);
}

::PROTOBUF_NAMESPACE_ID::Metadata push_msg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zlk_5fmessage_2eproto_getter, &descriptor_table_zlk_5fmessage_2eproto_once,
      file_level_metadata_zlk_5fmessage_2eproto[5]);
}

// ===================================================================

class response_msg::_Internal {
 public:
};

response_msg::response_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:zftp_message.response_msg)
}
response_msg::response_msg(const response_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  response_msg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){}
    , decltype(_impl_.ok_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ok_ = from._impl_.ok_;
  // @@protoc_insertion_point(copy_constructor:zftp_message.response_msg)
}

inline void response_msg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){}
    , decltype(_impl_.ok_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

response_msg::~response_msg() {
  // @@protoc_insertion_point(destructor:zftp_message.response_msg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void response_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
}

void response_msg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void response_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:zftp_message.response_msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_.ClearToEmpty();
  _impl_.ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* response_msg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "zftp_message.response_msg.error"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* response_msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zftp_message.response_msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  // string error = 2;
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zftp_message.response_msg.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zftp_message.response_msg)
  return target;
}

size_t response_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zftp_message.response_msg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2;
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData response_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    response_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*response_msg::GetClassData() const { return &_class_data_; }


void response_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<response_msg*>(&to_msg);
  auto& from = static_cast<const response_msg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:zftp_message.response_msg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _this->_internal_set_error(from._internal_error());
  }
  if (from._internal_ok() != 0) {
    _this->_internal_set_ok(from._internal_ok());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void response_msg::CopyFrom(const response_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zftp_message.response_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool response_msg::IsInitialized() const {
  return true;
}

void response_msg::InternalSwap(response_msg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  swap(_impl_.ok_, other->_impl_.ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata response_msg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_zlk_5fmessage_2eproto_getter, &descriptor_table_zlk_5fmessage_2eproto_once,
      file_level_metadata_zlk_5fmessage_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace zftp_message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zftp_message::Pakcet*
Arena::CreateMaybeMessage< ::zftp_message::Pakcet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zftp_message::Pakcet >(arena);
}
template<> PROTOBUF_NOINLINE ::zftp_message::mkdir_msg*
Arena::CreateMaybeMessage< ::zftp_message::mkdir_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zftp_message::mkdir_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::zftp_message::rm_msg*
Arena::CreateMaybeMessage< ::zftp_message::rm_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zftp_message::rm_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::zftp_message::pull_msg*
Arena::CreateMaybeMessage< ::zftp_message::pull_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zftp_message::pull_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::zftp_message::pull_respon_msg*
Arena::CreateMaybeMessage< ::zftp_message::pull_respon_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zftp_message::pull_respon_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::zftp_message::push_msg*
Arena::CreateMaybeMessage< ::zftp_message::push_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zftp_message::push_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::zftp_message::response_msg*
Arena::CreateMaybeMessage< ::zftp_message::response_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zftp_message::response_msg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
